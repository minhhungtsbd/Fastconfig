"""
FastConfigVPS - Windows VPS Configuration Tool
Chuy·ªÉn ƒë·ªïi t·ª´ AutoIt sang Python PyQt5
Version: 3.1
"""

import sys
import os
import json
import time
import threading
import subprocess
import winreg
import urllib.request
import tempfile
import re
import warnings
import ssl
import platform
from datetime import datetime, timedelta

# Suppress deprecation warnings from PyQt5
warnings.filterwarnings("ignore", category=DeprecationWarning)

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QGridLayout, QLabel, QLineEdit, QPushButton, QGroupBox,
    QCheckBox, QTabWidget, QTextEdit, QProgressBar, QMessageBox,
    QComboBox, QFileDialog, QSizePolicy
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QObject, QThread, QMetaObject, Q_ARG, pyqtSlot
from PyQt5.QtGui import QIcon, QColor, QFont, QTextCursor


class DownloadThread(QThread):
    """Thread ƒë·ªÉ download file"""
    progress = pyqtSignal(int)
    finished = pyqtSignal(bool, str)
    log_signal = pyqtSignal(str)
    
    def __init__(self, url, filepath, software_name):
        super().__init__()
        self.url = url
        self.filepath = filepath
        self.software_name = software_name
    
    def run(self):
        try:
            self.log_signal.emit(f"ƒêang t·∫£i {self.software_name} t·ª´ {self.url}...")
            
            def report_progress(block_num, block_size, total_size):
                downloaded = block_num * block_size
                if total_size > 0:
                    percent = int((downloaded / total_size) * 100)
                    self.progress.emit(percent)
            
            # Create SSL context that bypasses certificate verification for problematic URLs
            ssl_context = ssl.create_default_context()
            ssl_context.check_hostname = False
            ssl_context.verify_mode = ssl.CERT_NONE
            
            # Use SSL context for HTTPS requests
            if self.url.startswith('https://'):
                urllib.request.install_opener(urllib.request.build_opener(
                    urllib.request.HTTPSHandler(context=ssl_context)
                ))
            
            urllib.request.urlretrieve(self.url, self.filepath, report_progress)
            
            if os.path.exists(self.filepath):
                size = os.path.getsize(self.filepath)
                self.log_signal.emit(f"‚úì T·∫£i {self.software_name} th√†nh c√¥ng ({size} bytes)")
                
                # Ki·ªÉm tra v√† ƒë·ªïi t√™n file n·∫øu l√† MSI nh∆∞ng c√≥ t√™n .exe (ƒë·∫∑c bi·ªát v·ªõi Chrome)
                if self.software_name == "Chrome":
                    actual_filepath = self._check_and_rename_msi(self.filepath)
                    self.finished.emit(True, actual_filepath)
                else:
                    self.finished.emit(True, self.filepath)
            else:
                self.log_signal.emit(f"‚úó Kh√¥ng th·ªÉ t·∫£i {self.software_name}")
                self.finished.emit(False, "")
        
        except Exception as e:
            self.log_signal.emit(f"‚úó L·ªói khi t·∫£i {self.software_name}: {str(e)}")
            self.finished.emit(False, "")
    
    def _check_and_rename_msi(self, filepath):
        """Ki·ªÉm tra file header v√† ƒë·ªïi t√™n n·∫øu l√† MSI"""
        try:
            with open(filepath, 'rb') as f:
                header = f.read(8)
            
            # MSI file signature: D0 CF 11 E0 A1 B1 1A E1
            if header[:8] == b'\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1':
                self.log_signal.emit("üîç Ph√°t hi·ªán file MSI (header: D0CF11E0)")
                
                # ƒê·ªïi t√™n t·ª´ .exe sang .msi
                if filepath.endswith('.exe'):
                    new_filepath = filepath[:-4] + '.msi'
                    
                    # Retry logic ƒë·ªÉ x·ª≠ l√Ω file lock
                    max_retries = 3
                    for attempt in range(max_retries):
                        try:
                            if os.path.exists(new_filepath):
                                os.remove(new_filepath)
                            os.rename(filepath, new_filepath)
                            self.log_signal.emit(f"‚úì ƒê√£ ƒë·ªïi t√™n file th√†nh {os.path.basename(new_filepath)}")
                            return new_filepath
                        except Exception as e:
                            if attempt < max_retries - 1:
                                time.sleep(0.5)  # ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
                            else:
                                self.log_signal.emit(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªïi t√™n file: {str(e)}")
                                return filepath
            
            return filepath
        
        except Exception as e:
            self.log_signal.emit(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra file header: {str(e)}")
            return filepath


class InstallThread(QThread):
    """Thread ƒë·ªÉ c√†i ƒë·∫∑t ph·∫ßn m·ªÅm"""
    finished = pyqtSignal(bool, str)
    log_signal = pyqtSignal(str)
    
    def __init__(self, filepath, software_name, silent=True):
        super().__init__()
        self.filepath = filepath
        self.software_name = software_name
        self.silent = silent
    
    def run(self):
        try:
            self.log_signal.emit(f"ƒêang c√†i ƒë·∫∑t {self.software_name}...")
            
            # L·∫•y phi√™n b·∫£n Windows
            win_version = platform.version()
            self.log_signal.emit(f"üíª Windows version: {win_version}")
            
            # Ki·ªÉm tra lo·∫°i file
            is_msi = self.filepath.lower().endswith('.msi')
            
            # Logic ƒë·∫∑c bi·ªát cho Chrome
            if self.software_name == "Chrome":
                success = self._install_chrome(is_msi)
                if success:
                    self.log_signal.emit(f"‚úì C√†i ƒë·∫∑t {self.software_name} th√†nh c√¥ng")
                    self.finished.emit(True, self.software_name)
                else:
                    self.log_signal.emit(f"‚úó C√†i ƒë·∫∑t {self.software_name} th·∫•t b·∫°i v·ªõi t·∫•t c·∫£ methods")
                    self.finished.emit(False, self.software_name)
                return
            
            # Logic cho c√°c ph·∫ßn m·ªÅm kh√°c
            if self.software_name == "Firefox":
                params = "-ms" if self.silent else ""
            elif self.software_name == "Edge":
                params = "/silent /install" if self.silent else ""
            else:
                params = "/S" if self.silent else ""
            
            # Ch·∫°y installer
            cmd = f'"{self.filepath}" {params}'
            self.log_signal.emit(f"üîß Ch·∫°y: {cmd}")
            result = subprocess.run(cmd, shell=True, capture_output=True, timeout=300)
            
            if result.returncode == 0:
                self.log_signal.emit(f"‚úì C√†i ƒë·∫∑t {self.software_name} th√†nh c√¥ng")
                self.finished.emit(True, self.software_name)
            else:
                self.log_signal.emit(f"‚úó C√†i ƒë·∫∑t {self.software_name} th·∫•t b·∫°i (code: {result.returncode})")
                self.finished.emit(False, self.software_name)
        
        except subprocess.TimeoutExpired:
            self.log_signal.emit(f"‚úó C√†i ƒë·∫∑t {self.software_name} timeout")
            self.finished.emit(False, self.software_name)
        except Exception as e:
            self.log_signal.emit(f"‚úó L·ªói khi c√†i ƒë·∫∑t {self.software_name}: {str(e)}")
            self.finished.emit(False, self.software_name)
    
    def _install_chrome(self, is_msi):
        """C√†i ƒë·∫∑t Chrome v·ªõi c√°c ph∆∞∆°ng ph√°p ƒë√£ test th√†nh c√¥ng"""
        if is_msi:
            # Ph∆∞∆°ng ph√°p MSI - th·ª≠ /qn tr∆∞·ªõc, sau ƒë√≥ /passive
            methods = [
                ('msiexec /qn', f'msiexec /i "{self.filepath}" /qn /norestart'),
                ('msiexec /passive', f'msiexec /i "{self.filepath}" /passive /norestart')
            ]
        else:
            # Ph∆∞∆°ng ph√°p EXE - th·ª≠ /silent /install tr∆∞·ªõc, sau ƒë√≥ interactive
            methods = [
                ('AutoIt (/silent /install)', f'"{self.filepath}" /silent /install'),
                ('Interactive (no params)', f'"{self.filepath}"')
            ]
        
        for method_name, cmd in methods:
            try:
                self.log_signal.emit(f"üîß Th·ª≠ ph∆∞∆°ng ph√°p: {method_name}")
                self.log_signal.emit(f"   L·ªánh: {cmd}")
                
                result = subprocess.run(
                    cmd, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    timeout=300
                )
                
                self.log_signal.emit(f"   Exit code: {result.returncode}")
                
                # Ki·ªÉm tra Chrome c√≥ th·ª±c s·ª± ƒë∆∞·ª£c c√†i hay kh√¥ng
                chrome_paths = [
                    r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                    r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
                ]
                
                chrome_found = any(os.path.exists(path) for path in chrome_paths)
                
                # ƒêi·ªÅu ki·ªán th√†nh c√¥ng: exit code = 0 V√Ä Chrome ƒë∆∞·ª£c c√†i
                if result.returncode == 0:
                    if chrome_found:
                        self.log_signal.emit(f"‚úì {method_name} th√†nh c√¥ng - Chrome ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
                        return True
                    else:
                        self.log_signal.emit(f"‚ö†Ô∏è Exit code 0 nh∆∞ng Chrome kh√¥ng ƒë∆∞·ª£c c√†i - th·ª≠ ph∆∞∆°ng ph√°p ti·∫øp theo")
                else:
                    self.log_signal.emit(f"‚úó Ph∆∞∆°ng ph√°p {method_name} th·∫•t b·∫°i (exit code: {result.returncode})")
                    if result.stderr:
                        error_msg = result.stderr.strip()
                        if error_msg:
                            self.log_signal.emit(f"   Error: {error_msg[:200]}")
                    
            except subprocess.TimeoutExpired:
                self.log_signal.emit(f"‚ö†Ô∏è Timeout - Ph∆∞∆°ng ph√°p {method_name} ch·∫°y qu√° l√¢u")
                continue
            except Exception as e:
                self.log_signal.emit(f"‚úó L·ªói v·ªõi ph∆∞∆°ng ph√°p {method_name}: {str(e)}")
                continue
        
        # N·∫øu t·∫•t c·∫£ ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i
        self.log_signal.emit("‚úó T·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p c√†i ƒë·∫∑t Chrome ƒë·ªÅu th·∫•t b·∫°i")
        return False


class FastConfigVPS(QMainWindow):
    """·ª®ng d·ª•ng ch√≠nh FastConfigVPS"""
    
    VERSION = "3.1"
    
    # Custom signals for thread-safe UI updates
    log_signal = pyqtSignal(str)
    status_signal = pyqtSignal(str)
    progress_signal = pyqtSignal(int)
    stop_processing_signal = pyqtSignal()
    enable_button_signal = pyqtSignal(bool)
    show_update_dialog_signal = pyqtSignal(str, str, float)  # version, size_mb, download_url
    show_message_signal = pyqtSignal(str, str, str)  # title, message, type (info/warning/error)
    
    # URLs cho c√°c ph·∫ßn m·ªÅm
    SOFTWARE_URLS = {
        "Chrome": {
            "6.3": "https://files.cloudmini.net/ChromeSetup.exe",  # Prioritize working fallback URL
            "10.0": "https://dl.google.com/dl/chrome/install/googlechromestandaloneenterprise64.msi",
            "fallback": "https://archive.org/download/browser_02.05.2022/Browser/ChromeSetup.exe",  # Move problematic URL to fallback
            "filename": "chrome_installer.exe"
        },
        "Firefox": {
            "6.3": "https://download.mozilla.org/?product=firefox-esr115-latest-ssl&os=win64&lang=en-US",
            "10.0": "https://download.mozilla.org/?product=firefox-latest&os=win64&lang=en-US",
            "fallback": "https://files.cloudmini.net/FirefoxSetup.exe",
            "filename": "firefox_installer.exe"
        },
        "Edge": {
            "6.3": "https://files.cloudmini.net/MicrosoftEdgeSetup.exe",
            "10.0": "https://c2rsetup.officeapps.live.com/c2r/downloadEdge.aspx?ProductreleaseID=Edge&platform=Default&version=Edge&source=EdgeStablePage&Channel=Stable&language=en",
            "fallback": "https://files.cloudmini.net/MicrosoftEdgeSetup.exe",
            "filename": "edge_installer.exe"
        },
        "Brave": {
            "6.3": "https://github.com/brave/brave-browser/releases/download/v1.43.93/BraveBrowserStandaloneSilentSetup.exe",
            "10.0": "https://laptop-updates.brave.com/latest/winx64",
            "fallback": "https://files.cloudmini.net/BraveBrowserSetup.exe",
            "filename": "brave_installer.exe"
        },
        "Opera": {
            "6.3": "https://download.opera.com/download/get/?id=63649&nothanks=yes&sub=marine&utm_tryagain=yes",
            "10.0": "https://download.opera.com/download/get/?id=74098&nothanks=yes&sub=marine&utm_tryagain=yes",
            "fallback": "https://files.cloudmini.net/Opera_10.exe",
            "fallback_6.3": "https://files.cloudmini.net/Opera_6.3.exe",
            "filename": "opera_installer.exe"
        },
        "Centbrowser": {
            "10.0": "https://static.centbrowser.com/win_stable/5.2.1168.83/centbrowser_5.2.1168.83_x64.exe",
            "fallback": "https://files.cloudmini.net/CentbrowserSetup.exe",
            "filename": "centbrowser.exe"
        },
        "Bitvise SSH": {
            "10.0": "https://dl.bitvise.com/BvSshClient-Inst.exe",
            "fallback": "https://files.cloudmini.net/BvSshClient-Inst.exe",
            "filename": "BvSshClient-Inst.exe"
        },
        "Proxifier": {
            "10.0": "https://www.proxifier.com/download/ProxifierSetup.exe",
            "fallback": "https://files.cloudmini.net/ProxifierSetup.exe",
            "filename": "ProxifierSetup.exe"
        },
        "WinRAR": {
            "10.0": "https://www.rarlab.com/rar/winrar-x64-713.exe",
            "fallback": "https://files.cloudmini.net/winrar-x64.exe",
            "filename": "winrar.exe"
        },
        "7-Zip": {
            "10.0": "https://www.7-zip.org/a/7z2501-x64.exe",
            "fallback": "https://files.cloudmini.net/7z-x64.exe",
            "filename": "7zip.exe"
        },
        "Notepad++": {
            "10.0": "https://github.com/notepad-plus-plus/notepad-plus-plus/releases/download/v8.8.6/npp.8.8.6.Installer.x64.exe",
            "fallback": "https://files.cloudmini.net/npp.Installer.x64.exe",
            "filename": "notepadpp.exe"
        },
        "VLC": {
            "10.0": "https://files.cloudmini.net/vlc-win64.exe",
            "fallback": "https://files.cloudmini.net/vlc-win64.exe",
            "filename": "vlc.exe"
        }
    }
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle(f"FastConfigVPS v{self.VERSION}")
        self.setGeometry(100, 100, 750, 600)
        self.setMinimumSize(700, 550)
        
        # T·∫°o th∆∞ m·ª•c logs TRUN∆†C (c·∫ßn tr∆∞·ªõc khi g·ªçi b·∫•t k·ª≥ log())
        appdata_local = os.path.join(os.environ.get('APPDATA', os.path.expanduser('~')), '..', 'Local', 'FastConfigVPS')
        self.logs_dir = os.path.normpath(appdata_local)
        if not os.path.exists(self.logs_dir):
            try:
                os.makedirs(self.logs_dir)
            except Exception as e:
                # Fallback ƒë·∫øn th∆∞ m·ª•c c√πng n·∫øu AppData kh√¥ng kh·∫£ d·ª•ng
                self.logs_dir = "logs"
                if not os.path.exists(self.logs_dir):
                    os.makedirs(self.logs_dir)
        
        # Set icon
        self.set_app_icon()
        
        # Kh·ªüi t·∫°o bi·∫øn
        self.current_theme = "light"
        self.windows_version = self.detect_windows_version()
        self.total_steps = 0
        self.current_step = 0
        self.running_tasks = []
        self.install_queue = []  # Queue for sequential software installation
        self.current_install_thread = None
        self.has_errors = False  # Track n·∫øu c√≥ l·ªói trong qu√° tr√¨nh c·∫•u h√¨nh
        self.downloaded_files = []  # Danh s√°ch file ƒë√£ t·∫£i trong ch·∫ø ƒë·ªô download-only
        
        # C·∫•u h√¨nh giao di·ªán
        self.init_ui()
        self.apply_theme()
        
        # Connect signals for thread-safe UI updates
        self.log_signal.connect(self._append_log)
        self.status_signal.connect(self._update_status_ui)
        self.progress_signal.connect(self._update_progress_ui)
        self.stop_processing_signal.connect(self._stop_processing_ui)
        self.enable_button_signal.connect(self.start_button.setEnabled)
        self.show_update_dialog_signal.connect(self._show_update_dialog)
        self.show_message_signal.connect(self._show_message_box)
        
        # Log kh·ªüi ƒë·ªông
        self.log(f"FastConfigVPS v{self.VERSION} ƒë√£ kh·ªüi ƒë·ªông")
        self.log(f"Ph√°t hi·ªán Windows version: {self.windows_version}")
        
        # Detect network configuration
        self.detect_network_config()

        # Log update system availability
        self.log("H·ªá th·ªëng c·∫≠p nh·∫≠t t·ª´ GitHub Releases s·∫µn s√†ng. D√πng n√∫t ‚ü≥ ƒë·ªÉ ki·ªÉm tra.")
    
    def set_app_icon(self):
        """Thi·∫øt l·∫≠p icon cho ·ª©ng d·ª•ng"""
        try:
            # N·∫øu ch·∫°y t·ª´ PyInstaller
            if getattr(sys, 'frozen', False):
                # Ch·∫°y t·ª´ exe
                base_path = sys._MEIPASS
            else:
                # Ch·∫°y t·ª´ script Python
                base_path = os.path.dirname(os.path.abspath(__file__))
            
            icon_path = os.path.join(base_path, "app_icon.png")
            
            if os.path.exists(icon_path):
                self.setWindowIcon(QIcon(icon_path))
            else:
                # Th·ª≠ t√¨m ·ªü th∆∞ m·ª•c hi·ªán t·∫°i
                if os.path.exists("app_icon.png"):
                    self.setWindowIcon(QIcon("app_icon.png"))
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ t·∫£i icon: {str(e)}")
    
    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng"""
        # Widget trung t√¢m
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout ch√≠nh
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(8, 8, 8, 8)
        main_layout.setSpacing(8)
        
        # Top bar v·ªõi n√∫t theme
        top_bar = QHBoxLayout()
        top_bar.setContentsMargins(0, 0, 0, 0)
        
        # Title label - Hi·ªÉn th·ªã Windows version
        windows_display_name = self.get_windows_display_name()
        title_label = QLabel(windows_display_name)
        title_label.setFont(QFont("Segoe UI", 10, QFont.Medium))
        title_label.setStyleSheet("color: #6b7280;")
        
        # Theme toggle button v·ªõi icon
        self.theme_button = QPushButton("‚òÄ")
        self.theme_button.setToolTip("Chuy·ªÉn ch·∫ø ƒë·ªô t·ªëi/s√°ng")
        self.theme_button.setFixedSize(36, 36)
        self.theme_button.setStyleSheet("""
            QPushButton {
                background-color: #ffffff;
                border: 2px solid #d1d5db;
                border-radius: 18px;
                font-size: 20px;
                padding: 0px;
                color: #1e293b;
            }
            QPushButton:hover {
                background-color: #f9fafb;
                border-color: #9ca3af;
            }
        """)
        self.theme_button.clicked.connect(self.toggle_theme)

        # Update button (GitHub Releases)
        self.update_button = QPushButton("‚ü≥")
        self.update_button.setToolTip("Ki·ªÉm tra c·∫≠p nh·∫≠t")
        self.update_button.setFixedSize(36, 36)
        self.update_button.setStyleSheet(self.theme_button.styleSheet())
        self.update_button.clicked.connect(self.on_check_update_click)
        
        top_bar.addWidget(title_label)
        top_bar.addStretch()
        top_bar.addWidget(self.update_button)
        top_bar.addWidget(self.theme_button)
        
        main_layout.addLayout(top_bar)
        
        # Tab widget
        self.tab_widget = QTabWidget()
        
        # Tab 1: Software Installation
        self.create_software_tab()
        
        # Tab 2: System Configuration
        self.create_system_tab()
        
        # Tab 3: Network & Advanced
        self.create_network_tab()
        
        # Tab 4: Logs & RDP History
        self.create_logs_tab()
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        
        # Status label
        self.status_label = QLabel("S·∫µn s√†ng c·∫•u h√¨nh h·ªá th·ªëng...")
        self.status_label.setStyleSheet("padding: 5px; border: 1px solid #e5e7eb;")
        
        # Main button
        self.start_button = QPushButton("üöÄ B·∫Øt ƒë·∫ßu c·∫•u h√¨nh")
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: #4f46e5;
                color: white;
                padding: 8px;
                border-radius: 5px;
                font-size: 13px;
                font-weight: 600;
                min-height: 38px;
            }
            QPushButton:hover {
                background-color: #4338ca;
            }
            QPushButton:pressed {
                background-color: #3730a3;
            }
        """)
        self.start_button.clicked.connect(self.start_configuration)
        
        # Spinner icon cho button state
        self.is_processing = False
        
        # Add widgets to main layout
        main_layout.addWidget(self.tab_widget)
        main_layout.addWidget(self.progress_bar)
        main_layout.addWidget(self.status_label)
        main_layout.addWidget(self.start_button)
    
    def create_software_tab(self):
        """T·∫°o tab Software Installation"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(8)
        
        # Browsers group
        browsers_group = QGroupBox("Tr√¨nh duy·ªát Web")
        browsers_layout = QGridLayout()
        browsers_layout.setSpacing(6)
        
        self.cb_chrome = QCheckBox("Google Chrome (Latest)")
        self.cb_firefox = QCheckBox("Mozilla Firefox (Latest)")
        self.cb_opera = QCheckBox("Opera Browser")
        self.cb_edge = QCheckBox("Microsoft Edge")
        self.cb_brave = QCheckBox("Brave Browser")
        self.cb_centbrowser = QCheckBox("Centbrowser")
        
        browsers_layout.addWidget(self.cb_chrome, 0, 0)
        browsers_layout.addWidget(self.cb_firefox, 0, 1)
        browsers_layout.addWidget(self.cb_opera, 1, 0)
        browsers_layout.addWidget(self.cb_edge, 1, 1)
        browsers_layout.addWidget(self.cb_brave, 2, 0)
        browsers_layout.addWidget(self.cb_centbrowser, 2, 1)
        
        browsers_group.setLayout(browsers_layout)
        
        # Utilities group
        utils_group = QGroupBox("Ti·ªán √≠ch & C√¥ng c·ª•")
        utils_layout = QGridLayout()
        utils_layout.setSpacing(6)
        
        self.cb_bitvise = QCheckBox("Bitvise SSH Client")
        self.cb_notepadpp = QCheckBox("Notepad++")
        self.cb_winrar = QCheckBox("WinRAR")
        self.cb_proxifier = QCheckBox("Proxifier")
        self.cb_7zip = QCheckBox("7-Zip")
        self.cb_vlc = QCheckBox("VLC Media Player")
        
        utils_layout.addWidget(self.cb_bitvise, 0, 0)
        utils_layout.addWidget(self.cb_notepadpp, 0, 1)
        utils_layout.addWidget(self.cb_winrar, 1, 0)
        utils_layout.addWidget(self.cb_proxifier, 1, 1)
        utils_layout.addWidget(self.cb_7zip, 2, 0)
        utils_layout.addWidget(self.cb_vlc, 2, 1)
        
        utils_group.setLayout(utils_layout)
        
        # Installation options
        options_group = QGroupBox("T√πy ch·ªçn c√†i ƒë·∫∑t")
        options_layout = QVBoxLayout()
        
        self.cb_silent_install = QCheckBox("C√†i ƒë·∫∑t im l·∫∑ng (kh√¥ng hi·ªÉn th·ªã)")
        self.cb_silent_install.setChecked(True)
        self.cb_download_only = QCheckBox("Ch·ªâ t·∫£i v·ªÅ (kh√¥ng c√†i ƒë·∫∑t)")
        
        # L√†m cho 2 checkbox ho·∫°t ƒë·ªông nh∆∞ radio buttons (ch·ªâ ch·ªçn 1)
        self.cb_silent_install.stateChanged.connect(self.on_silent_install_changed)
        self.cb_download_only.stateChanged.connect(self.on_download_only_changed)
        
        options_layout.addWidget(self.cb_silent_install)
        options_layout.addWidget(self.cb_download_only)
        
        options_group.setLayout(options_layout)
        
        # Add to tab
        layout.addWidget(browsers_group)
        layout.addWidget(utils_group)
        layout.addWidget(options_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "C√†i ƒë·∫∑t ph·∫ßn m·ªÅm")
    
    def create_system_tab(self):
        """T·∫°o tab System Configuration"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(8)
        
        # System settings group
        system_group = QGroupBox("C·∫•u h√¨nh h·ªá th·ªëng")
        system_layout = QGridLayout()
        system_layout.setSpacing(6)
        
        # C·ªôt tr√°i
        self.cb_uac = QCheckBox("T·∫Øt UAC (User Account Control)")
        self.cb_uac.setChecked(True)
        self.cb_winupdate = QCheckBox("T·∫Øt Windows Update")
        self.cb_winupdate.setChecked(True)
        self.cb_smallicon = QCheckBox("Bi·ªÉu t∆∞·ª£ng Taskbar nh·ªè")
        
        # C·ªôt ph·∫£i
        self.cb_ieesc = QCheckBox("T·∫Øt IE Enhanced Security")
        self.cb_ieesc.setChecked(True)
        self.cb_trayicon = QCheckBox("Hi·ªÉn th·ªã t·∫•t c·∫£ bi·ªÉu t∆∞·ª£ng System Tray")
        self.cb_trayicon.setChecked(True)
        self.cb_firewall = QCheckBox("T·∫Øt Windows Firewall")
        
        # Th√™m v√†o grid layout
        system_layout.addWidget(self.cb_uac, 0, 0)
        system_layout.addWidget(self.cb_ieesc, 0, 1)
        system_layout.addWidget(self.cb_winupdate, 1, 0)
        system_layout.addWidget(self.cb_trayicon, 1, 1)
        system_layout.addWidget(self.cb_smallicon, 2, 0)
        system_layout.addWidget(self.cb_firewall, 2, 1)
        
        system_group.setLayout(system_layout)
        
        # Password group
        password_group = QGroupBox("M·∫≠t kh·∫©u Windows")
        password_layout = QGridLayout()
        
        self.cb_change_password = QCheckBox("Thay ƒë·ªïi m·∫≠t kh·∫©u Windows")
        password_layout.addWidget(self.cb_change_password, 0, 0, 1, 2)
        
        password_layout.addWidget(QLabel("M·∫≠t kh·∫©u m·ªõi:"), 1, 0)
        
        # Password input v·ªõi show/hide button
        password_container = QHBoxLayout()
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setMinimumHeight(25)  # ƒê·ªìng ƒë·ªÅu v·ªõi RDP port input
        
        # Show/Hide password button
        self.show_password_button = QPushButton("üëÅ")
        self.show_password_button.setFixedSize(35, 25)  # TƒÉng k√≠ch th∆∞·ªõc v√† ƒë·ªìng ƒë·ªÅu chi·ªÅu cao
        self.show_password_button.setToolTip("Hi·ªÉn/·∫®n m·∫≠t kh·∫©u")
        self.show_password_button.setStyleSheet("""
            QPushButton {
                background-color: #f3f4f6;
                border: 1px solid #d1d5db;
                border-radius: 4px;
                font-size: 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #e5e7eb;
            }
            QPushButton:pressed {
                background-color: #d1d5db;
            }
        """)
        self.show_password_button.clicked.connect(self.toggle_password_visibility)
        
        password_container.addWidget(self.password_input)
        password_container.addWidget(self.show_password_button)
        password_container.setSpacing(3)  # Gi·∫£m spacing ƒë·ªÉ g·ªçn g√†ng h∆°n
        password_container.setContentsMargins(0, 0, 0, 0)
        
        password_widget = QWidget()
        password_widget.setLayout(password_container)
        password_layout.addWidget(password_widget, 1, 1)
        
        self.password_strength_label = QLabel("")
        password_layout.addWidget(self.password_strength_label, 2, 1)
        
        self.password_input.textChanged.connect(self.validate_password_strength)
        
        password_group.setLayout(password_layout)
        
        # RDP Configuration group
        rdp_group = QGroupBox("C·∫•u h√¨nh RDP")
        rdp_layout = QGridLayout()
        
        self.cb_change_rdp_port = QCheckBox("Thay ƒë·ªïi Port RDP")
        rdp_layout.addWidget(self.cb_change_rdp_port, 0, 0, 1, 2)
        
        rdp_layout.addWidget(QLabel("Port RDP m·ªõi:"), 1, 0)
        self.rdp_port_input = QLineEdit()
        self.rdp_port_input.setText("3389")
        self.rdp_port_input.setPlaceholderText("Nh·∫≠p port m·ªõi (1024-65535)")
        self.rdp_port_input.setMinimumHeight(25)  # ƒê·ªìng ƒë·ªÅu v·ªõi password input
        self.rdp_port_input.setEnabled(False)
        rdp_layout.addWidget(self.rdp_port_input, 1, 1)
        
        # Note label
        rdp_note_label = QLabel("L∆∞u √Ω: Port ph·∫£i n·∫±m trong kho·∫£ng 1-65535")
        rdp_note_label.setStyleSheet("font-style: italic; color: #6b7280; font-size: 9pt;")
        rdp_layout.addWidget(rdp_note_label, 2, 1)
        
        # Connect signal ƒë·ªÉ enable/disable port input
        self.cb_change_rdp_port.stateChanged.connect(self.toggle_rdp_port_input)
        
        rdp_group.setLayout(rdp_layout)
        
        # Add to tab
        layout.addWidget(system_group)
        layout.addWidget(password_group)
        layout.addWidget(rdp_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "C·∫•u h√¨nh h·ªá th·ªëng")
    
    def create_network_tab(self):
        """T·∫°o tab Network & Advanced"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(8)
        
        # Network configuration
        network_group = QGroupBox("C·∫•u h√¨nh m·∫°ng")
        network_layout = QGridLayout()
        
        self.cb_static_ip = QCheckBox("C·∫•u h√¨nh IP tƒ©nh & DNS")
        network_layout.addWidget(self.cb_static_ip, 0, 0, 1, 2)
        
        network_layout.addWidget(QLabel("IP | Subnet | Gateway:"), 1, 0)
        self.ip_input = QLineEdit()
        self.ip_input.setPlaceholderText("V√≠ d·ª•: 192.168.1.100|255.255.255.0|192.168.1.1")
        network_layout.addWidget(self.ip_input, 1, 1)
        
        network_layout.addWidget(QLabel("DNS Servers:"), 2, 0)
        self.dns_combo = QComboBox()
        self.dns_combo.addItems([
            "Google DNS (8.8.8.8)",
            "Cloudflare DNS (1.1.1.1)",
            "OpenDNS (208.67.222.222)",
            "Quad9 DNS (9.9.9.9)"
        ])
        network_layout.addWidget(self.dns_combo, 2, 1)
        
        self.cb_custom_dns = QCheckBox("DNS t√πy ch·ªânh:")
        network_layout.addWidget(self.cb_custom_dns, 3, 0)
        self.custom_dns_input = QLineEdit()
        self.custom_dns_input.setEnabled(False)
        self.custom_dns_input.setPlaceholderText("V√≠ d·ª•: 1.1.1.1,1.0.0.1")
        network_layout.addWidget(self.custom_dns_input, 3, 1)
        
        # Connect signal ƒë·ªÉ toggle gi·ªØa DNS combo v√† custom DNS input
        self.cb_custom_dns.stateChanged.connect(self.toggle_dns_input)
        
        network_group.setLayout(network_layout)
        
        # Advanced options
        advanced_group = QGroupBox("T√πy ch·ªçn n√¢ng cao")
        advanced_layout = QVBoxLayout()
        
        self.cb_activate = QCheckBox("K√≠ch ho·∫°t Windows (180 ng√†y)")
        self.cb_extend_hdd = QCheckBox("M·ªü r·ªông ·ªï ƒëƒ©a h·ªá th·ªëng")
        self.cb_extend_hdd.setChecked(True)
        
        advanced_layout.addWidget(self.cb_activate)
        advanced_layout.addWidget(self.cb_extend_hdd)
        
        advanced_group.setLayout(advanced_layout)
        
        # Windows Edition Conversion
        conversion_group = QGroupBox("Chuy·ªÉn ƒë·ªïi Windows Edition (Evaluation ‚Üí Standard)")
        conversion_layout = QGridLayout()
        
        self.cb_convert_2012 = QCheckBox("Windows Server 2012")
        self.cb_convert_2016 = QCheckBox("Windows Server 2016")
        self.cb_convert_2019 = QCheckBox("Windows Server 2019")
        self.cb_convert_2022 = QCheckBox("Windows Server 2022")
        
        conversion_layout.addWidget(self.cb_convert_2012, 0, 0)
        conversion_layout.addWidget(self.cb_convert_2016, 0, 1)
        conversion_layout.addWidget(self.cb_convert_2019, 1, 0)
        conversion_layout.addWidget(self.cb_convert_2022, 1, 1)
        
        note_label = QLabel("L∆∞u √Ω: Ch·ªâ ch·ªçn phi√™n b·∫£n kh·ªõp v·ªõi Windows hi·ªán t·∫°i")
        note_label.setStyleSheet("font-style: italic; color: #6b7280;")
        conversion_layout.addWidget(note_label, 2, 0, 1, 2)
        
        conversion_group.setLayout(conversion_layout)
        
        # Add to tab
        layout.addWidget(network_group)
        layout.addWidget(advanced_group)
        layout.addWidget(conversion_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "M·∫°ng & N√¢ng cao")
    
    def create_logs_tab(self):
        """T·∫°o tab Logs & RDP History"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(8)
        
        # RDP History
        rdp_group = QGroupBox("L·ªãch s·ª≠ ƒëƒÉng nh·∫≠p RDP")
        rdp_layout = QVBoxLayout()
        
        self.rdp_text = QTextEdit()
        self.rdp_text.setReadOnly(True)
        self.rdp_text.setFont(QFont("Consolas", 9))
        self.rdp_text.setPlainText("Nh·∫•n 'L·∫•y l·ªãch s·ª≠ RDP' ƒë·ªÉ xem c√°c ƒë·ªãa ch·ªâ IP ƒë√£ ƒëƒÉng nh·∫≠p v√†o m√°y ch·ªß n√†y.")
        
        rdp_buttons = QHBoxLayout()
        
        self.rdp_refresh_button = QPushButton("L·∫•y l·ªãch s·ª≠ RDP")
        self.rdp_refresh_button.clicked.connect(self.refresh_rdp_history)
        
        self.rdp_clear_button = QPushButton("X√≥a")
        self.rdp_clear_button.clicked.connect(lambda: self.rdp_text.clear())
        
        self.rdp_export_button = QPushButton("Xu·∫•t file")
        self.rdp_export_button.clicked.connect(self.export_rdp_history)
        
        rdp_buttons.addWidget(self.rdp_refresh_button)
        rdp_buttons.addWidget(self.rdp_clear_button)
        rdp_buttons.addWidget(self.rdp_export_button)
        rdp_buttons.addStretch()
        
        rdp_layout.addWidget(self.rdp_text)
        rdp_layout.addLayout(rdp_buttons)
        
        rdp_group.setLayout(rdp_layout)
        
        # Application logs
        log_group = QGroupBox("Nh·∫≠t k√Ω ·ª©ng d·ª•ng")
        log_layout = QVBoxLayout()
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setFont(QFont("Consolas", 9))
        
        log_buttons = QHBoxLayout()
        
        self.log_clear_button = QPushButton("X√≥a log")
        self.log_clear_button.clicked.connect(lambda: self.log_text.clear())
        
        log_buttons.addStretch()
        log_buttons.addWidget(self.log_clear_button)
        
        log_layout.addWidget(self.log_text)
        log_layout.addLayout(log_buttons)
        
        log_group.setLayout(log_layout)
        
        # Add to tab
        layout.addWidget(rdp_group)
        layout.addWidget(log_group)
        
        self.tab_widget.addTab(tab, "Logs & RDP History")
    
    def on_silent_install_changed(self, state):
        """Khi t√≠ch 'C√†i ƒë·∫∑t im l·∫∑ng' th√¨ untick 'Ch·ªâ t·∫£i v·ªÅ'"""
        if state == Qt.Checked and self.cb_download_only.isChecked():
            self.cb_download_only.setChecked(False)
    
    def on_download_only_changed(self, state):
        """Khi t√≠ch 'Ch·ªâ t·∫£i v·ªÅ' th√¨ untick 'C√†i ƒë·∫∑t im l·∫∑ng'"""
        if state == Qt.Checked and self.cb_silent_install.isChecked():
            self.cb_silent_install.setChecked(False)
    
    def toggle_dns_input(self):
        """Toggle gi·ªØa DNS combo v√† custom DNS input"""
        if self.cb_custom_dns.isChecked():
            self.custom_dns_input.setEnabled(True)
            self.dns_combo.setEnabled(False)
        else:
            self.custom_dns_input.setEnabled(False)
            self.dns_combo.setEnabled(True)
    
    def toggle_rdp_port_input(self):
        """Toggle RDP port input khi checkbox ƒë∆∞·ª£c ch·ªçn"""
        if self.cb_change_rdp_port.isChecked():
            self.rdp_port_input.setEnabled(True)
            self.rdp_port_input.setFocus()
        else:
            self.rdp_port_input.setEnabled(False)
    
    def get_windows_display_name(self):
        """L·∫•y t√™n hi·ªÉn th·ªã c·ªßa Windows"""
        try:
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion")
            product_name, _ = winreg.QueryValueEx(key, "ProductName")
            build, _ = winreg.QueryValueEx(key, "CurrentBuild")
            winreg.CloseKey(key)
            return f"{product_name} (Build {build})"
        except:
            return "Windows (Version Unknown)"
    
    def detect_windows_version(self):
        """Ph√°t hi·ªán phi√™n b·∫£n Windows (s·ª≠ d·ª•ng ver command + registry)"""
        try:
            # Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng l·ªánh ver ƒë·ªÉ l·∫•y build number ch√≠nh x√°c
            result = subprocess.run("ver", capture_output=True, text=True, shell=True)
            output = result.stdout
            
            # Parse output t·ª´ ver command: "Microsoft Windows [Version X.X.XXXXX.XXXXX]"
            import re as regex
            match = regex.search(r"Version ([0-9]+\.[0-9]+)", output)
            if match:
                version = match.group(1)
                self.log(f"Ph√°t hi·ªán Windows version t·ª´ ver command: {version}")
                return version
            
            # Ph∆∞∆°ng ph√°p 2: Fallback v√†o registry
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion")
            version, _ = winreg.QueryValueEx(key, "CurrentVersion")
            winreg.CloseKey(key)
            self.log(f"Ph√°t hi·ªán Windows version t·ª´ registry: {version}")
            return version
        except Exception as e:
            self.log(f"Kh√¥ng th·ªÉ ph√°t hi·ªán Windows version: {str(e)}")
            return "10.0"  # Default to Windows 10
    
    def detect_network_config(self):
        """Ph√°t hi·ªán c·∫•u h√¨nh m·∫°ng hi·ªán t·∫°i"""
        try:
            result = subprocess.run("ipconfig /all", capture_output=True, text=True, encoding='utf-8', errors='ignore', shell=True)
            output = result.stdout
            
            # Parse IP, subnet, gateway
            ip_match = re.search(r"IPv4 Address[.\s]+:\s+([\d.]+)", output)
            subnet_match = re.search(r"Subnet Mask[.\s]+:\s+([\d.]+)", output)
            gateway_match = re.search(r"Default Gateway[.\s]+:\s+([\d.]+)", output)
            
            if ip_match and subnet_match and gateway_match:
                ip = ip_match.group(1)
                subnet = subnet_match.group(1)
                gateway = gateway_match.group(1)
                
                # B·ªè qua loopback v√† APIPA
                if not (ip.startswith("127.") or ip.startswith("169.254.")):
                    config = f"{ip}|{subnet}|{gateway}"
                    self.ip_input.setText(config)
                    self.log(f"Ph√°t hi·ªán c·∫•u h√¨nh m·∫°ng: {config}")
        except Exception as e:
            self.log(f"Kh√¥ng th·ªÉ ph√°t hi·ªán c·∫•u h√¨nh m·∫°ng: {str(e)}")
    
    def toggle_password_visibility(self):
        """Chuy·ªÉn ƒë·ªïi hi·ªÉn th·ªã m·∫≠t kh·∫©u"""
        if self.password_input.echoMode() == QLineEdit.Password:
            self.password_input.setEchoMode(QLineEdit.Normal)
            self.show_password_button.setText("üôà")  # ·∫®n m·∫≠t kh·∫©u
            self.show_password_button.setToolTip("·∫®n m·∫≠t kh·∫©u")
        else:
            self.password_input.setEchoMode(QLineEdit.Password)
            self.show_password_button.setText("üëÅ")  # Hi·ªÉn m·∫≠t kh·∫©u
            self.show_password_button.setToolTip("Hi·ªÉn m·∫≠t kh·∫©u")
        
        # ƒê·∫£m b·∫£o icon lu√¥n c√≥ size l·ªõn
        self.show_password_button.setStyleSheet("""
            QPushButton {
                background-color: #f3f4f6;
                border: 1px solid #d1d5db;
                border-radius: 4px;
                font-size: 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #e5e7eb;
            }
            QPushButton:pressed {
                background-color: #d1d5db;
            }
        """)
    
    def validate_password_strength(self):
        """Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u"""
        password = self.password_input.text()
        
        if not password:
            self.password_strength_label.setText("")
            return
        
        score = 0
        if len(password) >= 8:
            score += 1
        if re.search(r"[a-z]", password) and re.search(r"[A-Z]", password):
            score += 1
        if re.search(r"\d", password):
            score += 1
        if re.search(r"[!@#$%^&*()_+=\[\]{};':,.<>/?-]", password):
            score += 1
        
        if score == 0:
            strength = "Qu√° y·∫øu"
            color = "#dc3545"
        elif score == 1:
            strength = "Y·∫øu"
            color = "#ffc107"
        elif score == 2:
            strength = "Trung b√¨nh"
            color = "#ffeb3b"
        elif score == 3:
            strength = "M·∫°nh"
            color = "#8bc34a"
        else:
            strength = "R·∫•t m·∫°nh"
            color = "#4caf50"
        
        self.password_strength_label.setText(f"ƒê·ªô m·∫°nh: {strength}")
        self.password_strength_label.setStyleSheet(f"color: {color}; font-weight: bold;")
    
    def log(self, message):
        """Ghi log - thread-safe version"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        
        # Check if we're in the main thread
        if threading.current_thread() is threading.main_thread():
            self._append_log(log_message)
        else:
            # Use signal for thread-safe logging from worker threads
            self.log_signal.emit(log_message)
    
    def _append_log(self, log_message):
        """Actually append log to UI - must be called from main thread"""
        try:
            # Ki·ªÉm tra log_text ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
            if hasattr(self, 'log_text') and self.log_text is not None:
                # Hi·ªÉn th·ªã trong UI
                self.log_text.append(log_message)
                
                # Cu·ªôn xu·ªëng cu·ªëi - simplified version without QTextCursor issues
                scrollbar = self.log_text.verticalScrollBar()
                scrollbar.setValue(scrollbar.maximum())
            
            # Ghi ra file (kh√¥ng ph·ª• thu·ªôc v√†o log_text)
            try:
                log_date = datetime.now().strftime("%Y-%m-%d")
                log_file = os.path.join(self.logs_dir, f"fastconfig_{log_date}.log")
                with open(log_file, "a", encoding="utf-8") as f:
                    f.write(log_message + "\n")
            except Exception as e:
                print(f"L·ªói ghi log: {str(e)}")
        except Exception as e:
            print(f"L·ªói append log: {str(e)}")
    
    def update_status(self, message):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i - thread-safe"""
        if threading.current_thread() is threading.main_thread():
            self._update_status_ui(message)
        else:
            self.status_signal.emit(message)
    
    @pyqtSlot(str)
    def _update_status_ui(self, message):
        """C·∫≠p nh·∫≠t UI status (ch·∫°y trong main thread)"""
        self.status_label.setText(message)
    
    def update_progress(self, value):
        """C·∫≠p nh·∫≠t progress bar - thread-safe"""
        if threading.current_thread() is threading.main_thread():
            self._update_progress_ui(value)
        else:
            self.progress_signal.emit(value)
    
    @pyqtSlot(int)
    def _update_progress_ui(self, value):
        """C·∫≠p nh·∫≠t UI progress (ch·∫°y trong main thread)"""
        self.progress_bar.setValue(value)
    
    def count_selected_tasks(self):
        """ƒê·∫øm s·ªë t√°c v·ª• ƒë∆∞·ª£c ch·ªçn"""
        count = 0
        
        # Software installations
        if self.cb_chrome.isChecked(): count += 1
        if self.cb_firefox.isChecked(): count += 1
        if self.cb_opera.isChecked(): count += 1
        if self.cb_edge.isChecked(): count += 1
        if self.cb_brave.isChecked(): count += 1
        if self.cb_centbrowser.isChecked(): count += 1
        if self.cb_bitvise.isChecked(): count += 1
        if self.cb_proxifier.isChecked(): count += 1
        if self.cb_notepadpp.isChecked(): count += 1
        if self.cb_7zip.isChecked(): count += 1
        if self.cb_winrar.isChecked(): count += 1
        if self.cb_vlc.isChecked(): count += 1
        
        # System configurations
        if self.cb_uac.isChecked(): count += 1
        if self.cb_ieesc.isChecked(): count += 1
        if self.cb_winupdate.isChecked(): count += 1
        if self.cb_trayicon.isChecked(): count += 1
        if self.cb_smallicon.isChecked(): count += 1
        if self.cb_firewall.isChecked(): count += 1
        if self.cb_change_password.isChecked(): count += 1
        if self.cb_change_rdp_port.isChecked(): count += 1
        
        # Network & Advanced
        if self.cb_static_ip.isChecked(): count += 1
        if self.cb_activate.isChecked(): count += 1
        if self.cb_extend_hdd.isChecked(): count += 1
        
        # Windows conversion
        if self.cb_convert_2012.isChecked(): count += 1
        if self.cb_convert_2016.isChecked(): count += 1
        if self.cb_convert_2019.isChecked(): count += 1
        if self.cb_convert_2022.isChecked(): count += 1
        
        return count
    
    def start_processing_mode(self):
        """Chuy·ªÉn n√∫t sang ch·∫ø ƒë·ªô ƒëang x·ª≠ l√Ω"""
        self.is_processing = True
        self.start_button.setText("‚è≥ ƒêang x·ª≠ l√Ω...")
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: #6b7280;
                color: white;
                padding: 8px;
                border-radius: 5px;
                font-size: 13px;
                font-weight: 600;
                min-height: 38px;
            }
        """)
    
    def stop_processing_mode(self):
        """Kh√¥i ph·ª•c l·∫°i n√∫t g·ªëc - thread-safe"""
        if threading.current_thread() is threading.main_thread():
            self._stop_processing_ui()
        else:
            self.stop_processing_signal.emit()
    
    @pyqtSlot()
    def _stop_processing_ui(self):
        """Kh√¥i ph·ª•c UI n√∫t (ch·∫°y trong main thread)"""
        self.is_processing = False
        self.start_button.setText("üöÄ B·∫Øt ƒë·∫ßu c·∫•u h√¨nh")
        self.start_button.setStyleSheet("""
            QPushButton {
                background-color: #4f46e5;
                color: white;
                padding: 8px;
                border-radius: 5px;
                font-size: 13px;
                font-weight: 600;
                min-height: 38px;
            }
            QPushButton:hover {
                background-color: #4338ca;
            }
            QPushButton:pressed {
                background-color: #3730a3;
            }
        """)
    
    def start_configuration(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh c·∫•u h√¨nh"""
        self.total_steps = self.count_selected_tasks()
        
        if self.total_steps == 0:
            QMessageBox.warning(self, "C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt t√πy ch·ªçn ƒë·ªÉ c·∫•u h√¨nh!")
            return
        
        self.current_step = 0
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(5)  # Ngay l·∫≠p t·ª©c l√™n 5% ƒë·ªÉ ph·∫£n √°nh ƒë√£ nh·∫•n n√∫t
        self.start_button.setEnabled(False)
        self.start_processing_mode()  # Chuy·ªÉn sang ch·∫ø ƒë·ªô processing
        
        self.log(f"B·∫Øt ƒë·∫ßu c·∫•u h√¨nh v·ªõi {self.total_steps} t√°c v·ª•...")
        self.update_status("ƒêang x·ª≠ l√Ω...")
        
        # Ch·∫°y c·∫•u h√¨nh trong thread
        threading.Thread(target=self.run_configuration, daemon=True).start()
    
    def run_configuration(self):
        """Ch·∫°y c√°c t√°c v·ª• c·∫•u h√¨nh"""
        try:
            # Reset error flag v√† downloaded files list
            self.has_errors = False
            self.downloaded_files = []
            
            # System configurations
            self.process_system_configuration()
            
            # Network configuration
            self.process_network_configuration()
            
            # Advanced options
            self.process_advanced_options()
            
            # Software installations
            self.process_software_installation()
            
            # N·∫øu c√≥ file ƒë√£ t·∫£i trong ch·∫ø ƒë·ªô download-only, m·ªü th∆∞ m·ª•c
            if self.downloaded_files and self.cb_download_only.isChecked():
                try:
                    # M·ªü th∆∞ m·ª•c Temp v√† highlight file ƒë·∫ßu ti√™n
                    first_file = self.downloaded_files[0]
                    subprocess.run(f'explorer /select,"{first_file}"', shell=True)
                    self.log(f"üìÇ ƒê√£ m·ªü th∆∞ m·ª•c ch·ª©a {len(self.downloaded_files)} file")
                except Exception as e:
                    self.log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c: {str(e)}")
            
            # Ho√†n th√†nh
            self.update_progress(100)
            self.update_status("C·∫•u h√¨nh ho√†n t·∫•t!")
            
            # Th√¥ng b√°o k·∫øt qu·∫£ t√πy theo c√≥ l·ªói hay kh√¥ng
            if self.has_errors:
                self.log("‚ö†Ô∏è C·∫•u h√¨nh ho√†n t·∫•t nh∆∞ng c√≥ m·ªôt s·ªë l·ªói. Ki·ªÉm tra log ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.")
                QMetaObject.invokeMethod(
                    self,
                    '_show_warning_message',
                    Qt.QueuedConnection
                )
            else:
                self.log("‚úì C·∫•u h√¨nh ƒë√£ ho√†n th√†nh th√†nh c√¥ng!")
                QMetaObject.invokeMethod(
                    self,
                    '_show_success_message',
                    Qt.QueuedConnection
                )
        
        except Exception as e:
            self.log(f"‚úó L·ªói trong qu√° tr√¨nh c·∫•u h√¨nh: {str(e)}")
            # Hi·ªÉn th·ªã popup l·ªói trong main thread
            error_msg = str(e)
            QMetaObject.invokeMethod(
                self,
                '_show_error_message',
                Qt.QueuedConnection,
                Q_ARG(str, error_msg)
            )
        
        finally:
            # Thread-safe enable button v√† kh√¥i ph·ª•c UI
            self.enable_button_signal.emit(True)
            self.stop_processing_mode()
    
    def increment_progress(self, task_name):
        """TƒÉng progress v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i"""
        self.current_step += 1
        progress = int((self.current_step / self.total_steps) * 100)
        self.update_progress(progress)
        self.update_status(f"{task_name} ({self.current_step}/{self.total_steps})")
    
    @pyqtSlot()
    def _show_success_message(self):
        """Hi·ªÉn th·ªã popup th√†nh c√¥ng (ch·∫°y trong main thread)"""
        QMessageBox.information(self, "Th√†nh c√¥ng", 
            "C·∫•u h√¨nh ƒë√£ ho√†n th√†nh!\n\nM·ªôt s·ªë thay ƒë·ªïi c√≥ th·ªÉ c·∫ßn kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng.")
    
    @pyqtSlot()
    def _show_warning_message(self):
        """Hi·ªÉn th·ªã popup c·∫£nh b√°o (ch·∫°y trong main thread)"""
        QMessageBox.warning(self, "Ho√†n t·∫•t v·ªõi l·ªói", 
            "C·∫•u h√¨nh ƒë√£ ho√†n t·∫•t nh∆∞ng c√≥ m·ªôt s·ªë l·ªói.\n\n"
            "Ki·ªÉm tra tab 'Logs & RDP History' ƒë·ªÉ xem chi ti·∫øt.\n\n"
            "M·ªôt s·ªë thay ƒë·ªïi c√≥ th·ªÉ c·∫ßn kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng.")
    
    @pyqtSlot(str)
    def _show_error_message(self, error_msg):
        """Hi·ªÉn th·ªã popup l·ªói (ch·∫°y trong main thread)"""
        QMessageBox.critical(self, "L·ªói", f"ƒê√£ x·∫£y ra l·ªói:\n{error_msg}")
    
    def process_system_configuration(self):
        """X·ª≠ l√Ω c·∫•u h√¨nh h·ªá th·ªëng"""
        try:
            # UAC
            if self.cb_uac.isChecked():
                self.update_status("ƒêang t·∫Øt UAC...")
                self.set_registry_value(
                    winreg.HKEY_LOCAL_MACHINE,
                    r"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System",
                    "EnableLUA",
                    0,
                    winreg.REG_DWORD
                )
                self.log("‚úì ƒê√£ t·∫Øt UAC")
                self.increment_progress("T·∫Øt UAC")
            
            # IE ESC
            if self.cb_ieesc.isChecked():
                self.update_status("ƒêang t·∫Øt IE Enhanced Security...")
                self.set_registry_value(
                    winreg.HKEY_LOCAL_MACHINE,
                    r"SOFTWARE\Microsoft\Active Setup\Installed Components\{A509B1A7-37EF-4b3f-8CFC-4F3A74704073}",
                    "IsInstalled",
                    0,
                    winreg.REG_DWORD
                )
                self.log("‚úì ƒê√£ t·∫Øt IE Enhanced Security")
                self.increment_progress("T·∫Øt IE ESC")
            
            # Windows Update
            if self.cb_winupdate.isChecked():
                self.update_status("ƒêang t·∫Øt Windows Update...")
                self.set_registry_value(
                    winreg.HKEY_LOCAL_MACHINE,
                    r"SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update",
                    "AUOptions",
                    1,
                    winreg.REG_DWORD
                )
                self.log("‚úì ƒê√£ t·∫Øt Windows Update")
                self.increment_progress("T·∫Øt Windows Update")
            
            # System Tray Icons
            if self.cb_trayicon.isChecked():
                self.update_status("ƒêang c·∫•u h√¨nh System Tray...")
                self.set_registry_value(
                    winreg.HKEY_CURRENT_USER,
                    r"Software\Microsoft\Windows\CurrentVersion\Explorer",
                    "EnableAutoTray",
                    0,
                    winreg.REG_DWORD
                )
                self.log("‚úì ƒê√£ c·∫•u h√¨nh hi·ªÉn th·ªã t·∫•t c·∫£ bi·ªÉu t∆∞·ª£ng System Tray")
                self.increment_progress("C·∫•u h√¨nh System Tray")
            
            # Taskbar Small Icons
            if self.cb_smallicon.isChecked():
                self.update_status("ƒêang c·∫•u h√¨nh Taskbar...")
                self.set_registry_value(
                    winreg.HKEY_CURRENT_USER,
                    r"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced",
                    "TaskbarSmallIcons",
                    1,
                    winreg.REG_DWORD
                )
                self.log("‚úì ƒê√£ c·∫•u h√¨nh Taskbar s·ª≠ d·ª•ng bi·ªÉu t∆∞·ª£ng nh·ªè")
                self.increment_progress("C·∫•u h√¨nh Taskbar")
            
            # Windows Firewall
            if self.cb_firewall.isChecked():
                self.update_status("ƒêang t·∫Øt Windows Firewall...")
                result = subprocess.run("NetSh Advfirewall set allprofiles state off", 
                                      capture_output=True, shell=True)
                if result.returncode == 0:
                    self.log("‚úì ƒê√£ t·∫Øt Windows Firewall")
                else:
                    self.log(f"‚úó Kh√¥ng th·ªÉ t·∫Øt Firewall (code: {result.returncode})")
                self.increment_progress("T·∫Øt Firewall")
            
            # Change Password
            if self.cb_change_password.isChecked():
                password = self.password_input.text()
                if password:
                    self.update_status("ƒêang thay ƒë·ªïi m·∫≠t kh·∫©u...")
                    result = subprocess.run(f'net user "%USERNAME%" "{password}"',
                                          capture_output=True, shell=True)
                    if result.returncode == 0:
                        self.log("‚úì ƒê√£ thay ƒë·ªïi m·∫≠t kh·∫©u Windows")
                    else:
                        self.log("‚úó Kh√¥ng th·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u")
                    self.increment_progress("Thay ƒë·ªïi m·∫≠t kh·∫©u")
            
            # Change RDP Port
            if self.cb_change_rdp_port.isChecked():
                rdp_port = self.rdp_port_input.text().strip()
                if rdp_port and rdp_port.isdigit():
                    port_num = int(rdp_port)
                    if 1 <= port_num <= 65535:
                        self.update_status(f"ƒêang thay ƒë·ªïi RDP port th√†nh {rdp_port}...")
                        
                        # Thay ƒë·ªïi port trong registry
                        success1 = self.set_registry_value(
                            winreg.HKEY_LOCAL_MACHINE,
                            r"SYSTEM\CurrentControlSet\Control\Terminal Server\Wds\rdpwd\Tds\tcp",
                            "PortNumber",
                            port_num,
                            winreg.REG_DWORD
                        )
                        
                        success2 = self.set_registry_value(
                            winreg.HKEY_LOCAL_MACHINE,
                            r"SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp",
                            "PortNumber",
                            port_num,
                            winreg.REG_DWORD
                        )
                        
                        if success1 and success2:
                            # Th√™m rule firewall cho port m·ªõi
                            firewall_cmd = f'netsh advfirewall firewall add rule name="RDP-Custom-{rdp_port}" dir=in action=allow protocol=TCP localport={rdp_port}'
                            subprocess.run(firewall_cmd, capture_output=True, shell=True)
                            
                            self.log(f"‚úì ƒê√£ thay ƒë·ªïi RDP port th√†nh {rdp_port}")
                            self.log(f"‚úì ƒê√£ th√™m rule firewall cho port {rdp_port}")
                            self.log("‚ö†Ô∏è  C·∫ßn kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi RDP port")
                        else:
                            self.log("‚úó Kh√¥ng th·ªÉ thay ƒë·ªïi RDP port")
                    else:
                        self.log("‚úó RDP port kh√¥ng h·ª£p l·ªá (ph·∫£i t·ª´ 1-65535)")
                else:
                    self.log("‚úó RDP port kh√¥ng h·ª£p l·ªá")
                    
                self.increment_progress("Thay ƒë·ªïi RDP Port")
        
        except Exception as e:
            self.log(f"‚úó L·ªói khi c·∫•u h√¨nh h·ªá th·ªëng: {str(e)}")
    
    def process_network_configuration(self):
        """X·ª≠ l√Ω c·∫•u h√¨nh m·∫°ng"""
        try:
            if not self.cb_static_ip.isChecked():
                return
            
            self.update_status("ƒêang c·∫•u h√¨nh m·∫°ng...")
            
            ip_config = self.ip_input.text()
            parts = ip_config.split("|")
            
            if len(parts) != 3:
                self.log("‚úó ƒê·ªãnh d·∫°ng IP kh√¥ng h·ª£p l·ªá")
                return
            
            ip, subnet, gateway = parts
            
            # Get DNS
            if self.cb_custom_dns.isChecked():
                dns_servers = self.custom_dns_input.text()
            else:
                dns_map = {
                    "Google DNS (8.8.8.8)": "8.8.8.8,8.8.4.4",
                    "Cloudflare DNS (1.1.1.1)": "1.1.1.1,1.0.0.1",
                    "OpenDNS (208.67.222.222)": "208.67.222.222,208.67.220.220",
                    "Quad9 DNS (9.9.9.9)": "9.9.9.9,149.112.112.112"
                }
                dns_servers = dns_map.get(self.dns_combo.currentText(), "8.8.8.8,8.8.4.4")
            
            dns_list = dns_servers.split(",")
            
            # Find network adapter name
            result = subprocess.run("netsh interface show interface", 
                                  capture_output=True, text=True, shell=True)
            
            # Simple parsing - get first connected adapter
            adapter_name = None
            for line in result.stdout.split("\n"):
                if "Connected" in line and "Dedicated" in line:
                    parts = line.split()
                    adapter_name = " ".join(parts[3:])
                    break
            
            if not adapter_name:
                adapter_name = "Ethernet"  # Default fallback
            
            self.log(f"ƒêang c·∫•u h√¨nh adapter: {adapter_name}")
            
            # Set static IP
            cmd = f'netsh interface ip set address "{adapter_name}" static {ip} {subnet} {gateway} 1'
            result = subprocess.run(cmd, capture_output=True, shell=True)
            
            if result.returncode == 0:
                self.log(f"‚úì ƒê√£ c·∫•u h√¨nh IP: {ip}/{subnet}, Gateway: {gateway}")
                
                # Set DNS
                if len(dns_list) > 0:
                    cmd = f'netsh interface ip set dns "{adapter_name}" static {dns_list[0].strip()}'
                    subprocess.run(cmd, capture_output=True, shell=True)
                    self.log(f"‚úì ƒê√£ c·∫•u h√¨nh DNS ch√≠nh: {dns_list[0].strip()}")
                    
                    if len(dns_list) > 1:
                        cmd = f'netsh interface ip add dns "{adapter_name}" {dns_list[1].strip()} index=2'
                        subprocess.run(cmd, capture_output=True, shell=True)
                        self.log(f"‚úì ƒê√£ c·∫•u h√¨nh DNS ph·ª•: {dns_list[1].strip()}")
            else:
                self.log("‚úó Kh√¥ng th·ªÉ c·∫•u h√¨nh IP")
            
            self.increment_progress("C·∫•u h√¨nh m·∫°ng")
        
        except Exception as e:
            self.log(f"‚úó L·ªói khi c·∫•u h√¨nh m·∫°ng: {str(e)}")
    
    def process_advanced_options(self):
        """X·ª≠ l√Ω t√πy ch·ªçn n√¢ng cao"""
        try:
            # Windows Activation
            if self.cb_activate.isChecked():
                self.update_status("ƒêang k√≠ch ho·∫°t Windows...")
                result = subprocess.run('cscript //nologo "%SystemRoot%\\system32\\slmgr.vbs" /ato',
                                      capture_output=True, shell=True)
                if result.returncode == 0:
                    self.log("‚úì ƒê√£ k√≠ch ho·∫°t Windows")
                else:
                    self.log("‚úó Kh√¥ng th·ªÉ k√≠ch ho·∫°t Windows")
                self.increment_progress("K√≠ch ho·∫°t Windows")
            
            # Extend HDD
            if self.cb_extend_hdd.isChecked():
                self.update_status("ƒêang m·ªü r·ªông ·ªï ƒëƒ©a...")
                diskpart_commands = "select volume C\nextend\nexit\n"
                result = subprocess.run("diskpart", input=diskpart_commands,
                                      capture_output=True, text=True, shell=True)
                if result.returncode == 0:
                    self.log("‚úì ƒê√£ m·ªü r·ªông ·ªï ƒëƒ©a h·ªá th·ªëng")
                else:
                    self.log("‚úó Kh√¥ng th·ªÉ m·ªü r·ªông ·ªï ƒëƒ©a")
                self.increment_progress("M·ªü r·ªông ·ªï ƒëƒ©a")
            
            # Windows Edition Conversion
            conversion_map = {
                self.cb_convert_2012: ("2012", "D2N9P-3P6X9-2R39C-7RTCD-MDVJX"),
                self.cb_convert_2016: ("2016", "WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY"),
                self.cb_convert_2019: ("2019", "N69G4-B89J2-4G8F4-WWYCC-J464C"),
                self.cb_convert_2022: ("2022", "VDYBN-27WPP-V4HQT-9VMD4-VMK7H")
            }
            
            for checkbox, (version, key) in conversion_map.items():
                if checkbox.isChecked():
                    self.update_status(f"ƒêang chuy·ªÉn ƒë·ªïi Windows {version}...")
                    cmd = f'DISM /online /Set-Edition:ServerStandard /ProductKey:{key} /AcceptEula'
                    result = subprocess.run(cmd, capture_output=True, shell=True)
                    if result.returncode == 0:
                        self.log(f"‚úì ƒê√£ chuy·ªÉn ƒë·ªïi Windows {version} Edition")
                    else:
                        self.log(f"‚úó Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi Windows {version} (code: {result.returncode})")
                    self.increment_progress(f"Chuy·ªÉn ƒë·ªïi Windows {version}")
        
        except Exception as e:
            self.log(f"‚úó L·ªói khi x·ª≠ l√Ω t√πy ch·ªçn n√¢ng cao: {str(e)}")
    
    def process_software_installation(self):
        """X·ª≠ l√Ω c√†i ƒë·∫∑t ph·∫ßn m·ªÅm"""
        software_map = {
            self.cb_chrome: "Chrome",
            self.cb_firefox: "Firefox",
            self.cb_opera: "Opera",
            self.cb_edge: "Edge",
            self.cb_brave: "Brave",
            self.cb_centbrowser: "Centbrowser",
            self.cb_bitvise: "Bitvise SSH",
            self.cb_proxifier: "Proxifier",
            self.cb_notepadpp: "Notepad++",
            self.cb_7zip: "7-Zip",
            self.cb_winrar: "WinRAR",
            self.cb_vlc: "VLC"
        }
        
        for checkbox, software_name in software_map.items():
            if checkbox.isChecked():
                self.install_software(software_name)
    
    def install_software(self, software_name):
        """C√†i ƒë·∫∑t m·ªôt ph·∫ßn m·ªÅm - synchronous version for worker thread"""
        try:
            self.update_status(f"ƒêang chu·∫©n b·ªã c√†i ƒë·∫∑t {software_name}...")
            
            # Get URL based on Windows version
            software_info = self.SOFTWARE_URLS.get(software_name)
            if not software_info:
                self.log(f"‚úó Kh√¥ng t√¨m th·∫•y th√¥ng tin cho {software_name}")
                self.increment_progress(f"C√†i ƒë·∫∑t {software_name}")
                return
            
            url = software_info.get(self.windows_version, software_info.get("10.0"))
            if not url:
                # Ki·ªÉm tra fallback theo version tr∆∞·ªõc
                fallback_key = f"fallback_{self.windows_version}"
                url = software_info.get(fallback_key, software_info.get("fallback"))
            
            filename = software_info.get("filename")
            filepath = os.path.join(tempfile.gettempdir(), filename)
            
            # B∆∞·ªõc 1: T·∫£i file
            self.update_status(f"ƒêang t·∫£i {software_name}...")
            self.log(f"üì• B·∫Øt ƒë·∫ßu t·∫£i {software_name} t·ª´ {url}...")
            
            # Download file directly (synchronous) with fallback retry
            download_success = False
            urls_to_try = [url]
            
            # Th√™m fallback URLs
            fallback_key = f"fallback_{self.windows_version}"
            if fallback_key in software_info:
                urls_to_try.append(software_info[fallback_key])
            if "fallback" in software_info:
                urls_to_try.append(software_info["fallback"])
            
            for attempt, try_url in enumerate(urls_to_try):
                try:
                    if attempt > 0:
                        self.log(f"üîÑ Th·ª≠ URL d·ª± ph√≤ng #{attempt}: {try_url}")
                    
                    # Create SSL context that bypasses certificate verification
                    ssl_context = ssl.create_default_context()
                    ssl_context.check_hostname = False
                    ssl_context.verify_mode = ssl.CERT_NONE
                    
                    # T·∫°o request v·ªõi browser headers ƒë·ªÉ bypass 403
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1'
                    }
                    
                    req = urllib.request.Request(try_url, headers=headers)
                    
                    if try_url.startswith('https://'):
                        opener = urllib.request.build_opener(
                            urllib.request.HTTPSHandler(context=ssl_context)
                        )
                        urllib.request.install_opener(opener)
                    
                    # T·∫£i file v·ªõi headers
                    with urllib.request.urlopen(req) as response:
                        with open(filepath, 'wb') as out_file:
                            out_file.write(response.read())
                    
                    if os.path.exists(filepath):
                        download_success = True
                        break
                        
                except Exception as download_error:
                    self.log(f"‚úó L·ªói t·∫£i t·ª´ {try_url}: {str(download_error)}")
                    if attempt < len(urls_to_try) - 1:
                        continue
            
            if not download_success or not os.path.exists(filepath):
                self.log(f"‚úó Kh√¥ng th·ªÉ t·∫£i {software_name} t·ª´ t·∫•t c·∫£ c√°c URL")
                self.has_errors = True
                # Ph·∫£i tƒÉng progress tr∆∞·ªõc khi return s·ªõm
                self.current_step += 1.0  # +1.0 v√¨ skip c·∫£ download v√† install
                progress = int((self.current_step / self.total_steps) * 100)
                self.update_progress(progress)
                return
            
            try:
                
                size = os.path.getsize(filepath)
                self.log(f"‚úì T·∫£i {software_name} ho√†n t·∫•t ({size:,} bytes)")
                
                # C·∫≠p nh·∫≠t progress sau khi t·∫£i xong (50%)
                self.current_step += 0.5
                progress = int((self.current_step / self.total_steps) * 100)
                self.update_progress(progress)
                self.update_status(f"ƒêang c√†i ƒë·∫∑t {software_name}...")
                
                # Ki·ªÉm tra v√† ƒë·ªïi t√™n file MSI n·∫øu c·∫ßn (cho Chrome)
                if software_name == "Chrome":
                    filepath = self._check_and_rename_msi_file(filepath)
                
                # B∆∞·ªõc 2: C√†i ƒë·∫∑t
                if not self.cb_download_only.isChecked():
                    self.update_status(f"ƒêang c√†i ƒë·∫∑t {software_name}...")
                    self.log(f"üîß B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t {software_name}...")
                    
                    # S·ª≠ d·ª•ng logic c√†i ƒë·∫∑t c·∫£i ti·∫øn cho Chrome
                    if software_name == "Chrome":
                        success = self._install_chrome_sync(filepath)
                        if success:
                            self.log(f"‚úì C√†i ƒë·∫∑t {software_name} th√†nh c√¥ng")
                        else:
                            self.log(f"‚úó C√†i ƒë·∫∑t {software_name} th·∫•t b·∫°i")
                            self.has_errors = True
                    else:
                        # Logic cho c√°c ph·∫ßn m·ªÅm kh√°c
                        if software_name == "Firefox":
                            params = "-ms" if self.cb_silent_install.isChecked() else ""
                        elif software_name == "Edge":
                            params = "/silent /install" if self.cb_silent_install.isChecked() else ""
                        elif software_name == "Opera":
                            # Opera silent install (kh√¥ng launch sau khi c√†i)
                            params = "--silent --launchopera=0" if self.cb_silent_install.isChecked() else ""
                        elif software_name == "Brave":
                            # Brave - test kh√¥ng tham s·ªë (gi·ªëng click ƒë√∫p)
                            params = ""
                        elif software_name == "Centbrowser":
                            # Centbrowser d√πng parameters ƒë·∫∑c bi·ªát
                            params = "--cb-auto-update --do-not-launch-chrome --system-level" if self.cb_silent_install.isChecked() else ""
                        elif software_name == "Bitvise SSH":
                            # Bitvise SSH (Inno Setup)
                            params = "-acceptEULA" if self.cb_silent_install.isChecked() else ""
                        elif software_name == "Proxifier":
                            # Proxifier (Inno Setup)
                            params = "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" if self.cb_silent_install.isChecked() else ""
                        elif software_name == "VLC":
                            # VLC (NSIS)
                            params = "/S" if self.cb_silent_install.isChecked() else ""
                        else:
                            # Default cho NSIS installers (WinRAR, 7-Zip, Notepad++)
                            params = "/S" if self.cb_silent_install.isChecked() else ""
                        
                        # Browser c·∫ßn timeout l√¢u h∆°n
                        is_browser = software_name in ["Chrome", "Firefox", "Edge", "Opera", "Brave", "Centbrowser"]
                        timeout_seconds = 600 if software_name == "Brave" else (450 if is_browser else 300)

                        # VLC v√† Brave ch·∫°y kh√¥ng ch·ªù (Popen - gi·ªëng click ƒë√∫p)
                        if software_name == "VLC" or software_name == "Brave":
                            cmd = f'"{filepath}"'
                            self.log(f"   L·ªánh: {cmd} (kh√¥ng ch·ªù)")
                            try:
                                subprocess.Popen(cmd, shell=True)
                                time.sleep(3)  # Ch·ªù installer kh·ªüi ƒë·ªông
                                self.log(f"   ‚úì ƒê√£ kh·ªüi ch·∫°y {software_name} installer.")
                            except Exception as e:
                                self.log(f"‚úó Kh√¥ng th·ªÉ kh·ªüi ch·∫°y {software_name}: {str(e)}")
                                self.has_errors = True
                        else:
                            cmd = f'"{filepath}" {params}'
                            self.log(f"   L·ªánh: {cmd}")
                            result = subprocess.run(cmd, shell=True, capture_output=True, timeout=timeout_seconds)

                            if result.returncode == 0:
                                self.log(f"‚úì C√†i ƒë·∫∑t {software_name} th√†nh c√¥ng")
                                
                                # Ch·ªù th√™m cho browser ho√†n t·∫•t (m·ªôt s·ªë installer spawn process con)
                                if is_browser:
                                    self.log(f"   ‚è≥ Ch·ªù {software_name} ho√†n t·∫•t c√†i ƒë·∫∑t...")
                                    time.sleep(3)  # Ch·ªù 3s cho process con ho√†n t·∫•t
                            else:
                                self.log(f"‚úó C√†i ƒë·∫∑t {software_name} th·∫•t b·∫°i (exit code: {result.returncode})")
                                self.has_errors = True
                    
                    # Kh√¥ng x√≥a file t·∫°m ngay - ƒë·ªÉ installer ho√†n t·∫•t
                    # File n·∫±m trong %TEMP% s·∫Ω t·ª± ƒë·ªông d·ªçn d·∫πp b·ªüi Windows
                    self.log(f"‚ÑπÔ∏è File c√†i ƒë·∫∑t ƒë·ªÉ t·∫°i: {filepath}")
                    self.log("‚ÑπÔ∏è Windows s·∫Ω t·ª± ƒë·ªông d·ªçn d·∫πp th∆∞ m·ª•c Temp.")
                else:
                    self.log(f"üì¶ Ch·∫ø ƒë·ªô ch·ªâ t·∫£i - b·ªè qua c√†i ƒë·∫∑t {software_name}")
                    self.log(f"   File l∆∞u t·∫°i: {filepath}")
                    # Th√™m v√†o danh s√°ch file ƒë√£ t·∫£i
                    self.downloaded_files.append(filepath)
                    
            except Exception as e:
                self.log(f"‚úó L·ªói khi c√†i {software_name}: {str(e)}")
                self.has_errors = True
            
        except Exception as e:
            self.log(f"‚úó L·ªói khi c√†i ƒë·∫∑t {software_name}: {str(e)}")
            self.has_errors = True
        
        finally:
            # Lu√¥n increment progress ƒë·ªÉ ho√†n t·∫•t task
            self.current_step += 0.5
            progress = int((self.current_step / self.total_steps) * 100)
            self.update_progress(progress)
    def _check_and_rename_msi_file(self, filepath):
        """Ki·ªÉm tra file header v√† ƒë·ªïi t√™n n·∫øu l√† MSI (cho main thread)"""
        try:
            with open(filepath, 'rb') as f:
                header = f.read(8)
            
            # MSI file signature: D0 CF 11 E0 A1 B1 1A E1
            if header[:8] == b'\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1':
                self.log("üîç Ph√°t hi·ªán file MSI (header: D0CF11E0)")
                
                if filepath.endswith('.exe'):
                    new_filepath = filepath[:-4] + '.msi'
                    
                    max_retries = 3
                    for attempt in range(max_retries):
                        try:
                            if os.path.exists(new_filepath):
                                os.remove(new_filepath)
                            os.rename(filepath, new_filepath)
                            self.log(f"‚úì ƒê√£ ƒë·ªïi t√™n file th√†nh {os.path.basename(new_filepath)}")
                            return new_filepath
                        except Exception as e:
                            if attempt < max_retries - 1:
                                time.sleep(0.5)
                            else:
                                self.log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªïi t√™n file: {str(e)}")
                                return filepath
            
            return filepath
        
        except Exception as e:
            self.log(f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra file header: {str(e)}")
            return filepath
    
    def _install_chrome_sync(self, filepath):
        """C√†i ƒë·∫∑t Chrome v·ªõi logic c·∫£i ti·∫øn (cho main thread)"""
        is_msi = filepath.lower().endswith('.msi')
        
        if is_msi:
            methods = [
                ('msiexec /qn', f'msiexec /i "{filepath}" /qn /norestart'),
                ('msiexec /passive', f'msiexec /i "{filepath}" /passive /norestart')
            ]
        else:
            methods = [
                ('AutoIt (/silent /install)', f'"{filepath}" /silent /install'),
                ('Interactive (no params)', f'"{filepath}"')
            ]
        
        for method_name, cmd in methods:
            try:
                self.log(f"üîß Th·ª≠ ph∆∞∆°ng ph√°p: {method_name}")
                self.log(f"   L·ªánh: {cmd}")
                
                result = subprocess.run(
                    cmd, 
                    shell=True, 
                    capture_output=True, 
                    text=True, 
                    timeout=300
                )
                
                self.log(f"   Exit code: {result.returncode}")
                
                # Ki·ªÉm tra Chrome c√≥ th·ª±c s·ª± ƒë∆∞·ª£c c√†i
                chrome_paths = [
                    r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                    r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
                ]
                
                chrome_found = any(os.path.exists(path) for path in chrome_paths)
                
                if result.returncode == 0:
                    if chrome_found:
                        self.log(f"‚úì {method_name} th√†nh c√¥ng - Chrome ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
                        return True
                    else:
                        self.log(f"‚ö†Ô∏è Exit code 0 nh∆∞ng Chrome kh√¥ng ƒë∆∞·ª£c c√†i - th·ª≠ ph∆∞∆°ng ph√°p ti·∫øp theo")
                else:
                    self.log(f"‚úó Ph∆∞∆°ng ph√°p {method_name} th·∫•t b·∫°i (exit code: {result.returncode})")
                    if result.stderr:
                        error_msg = result.stderr.strip()
                        if error_msg:
                            self.log(f"   Error: {error_msg[:200]}")
                
            except subprocess.TimeoutExpired:
                self.log(f"‚ö†Ô∏è Timeout - Ph∆∞∆°ng ph√°p {method_name} ch·∫°y qu√° l√¢u")
                continue
            except Exception as e:
                self.log(f"‚úó L·ªói v·ªõi ph∆∞∆°ng ph√°p {method_name}: {str(e)}")
                continue
        
        self.log("‚úó T·∫•t c·∫£ c√°c ph∆∞∆°ng ph√°p c√†i ƒë·∫∑t Chrome ƒë·ªÅu th·∫•t b·∫°i")
        return False
    
    def on_check_update_click(self):
        """Ki·ªÉm tra c·∫≠p nh·∫≠t t·ª´ GitHub Releases (ch·∫°y n·ªÅn)"""
        threading.Thread(target=self.check_github_update, daemon=True).start()

    def check_github_update(self):
        """Ki·ªÉm tra v√† t·∫£i c·∫≠p nh·∫≠t t·ª´ GitHub Releases"""
        try:
            # C·∫•u h√¨nh GitHub
            GITHUB_REPO = "minhhungtsbd/Fastconfig"
            GITHUB_API = f"https://api.github.com/repos/{GITHUB_REPO}/releases/latest"
            
            self.update_button.setEnabled(False)
            self.update_status("ƒêang ki·ªÉm tra c·∫≠p nh·∫≠t t·ª´ GitHub...")
            self.log(f"üîç Ki·ªÉm tra phi√™n b·∫£n m·ªõi t·ª´ {GITHUB_REPO}...")
            
            # G·ªçi GitHub API ƒë·ªÉ l·∫•y th√¥ng tin release m·ªõi nh·∫•t
            import urllib.request
            import json
            
            req = urllib.request.Request(GITHUB_API)
            req.add_header('User-Agent', 'FastConfigVPS-Updater')
            
            with urllib.request.urlopen(req, timeout=10) as response:
                data = json.loads(response.read().decode())
            
            latest_version = data.get('tag_name', '').lstrip('v')
            release_url = data.get('html_url', '')
            assets = data.get('assets', [])
            
            self.log(f"‚ÑπÔ∏è Phi√™n b·∫£n hi·ªán t·∫°i: {self.VERSION}")
            self.log(f"‚ÑπÔ∏è Phi√™n b·∫£n m·ªõi nh·∫•t: {latest_version}")
            
            # So s√°nh phi√™n b·∫£n
            if latest_version == self.VERSION:
                self.log("‚úì B·∫°n ƒëang d√πng phi√™n b·∫£n m·ªõi nh·∫•t.")
                self.show_message_signal.emit(
                    "C·∫≠p nh·∫≠t",
                    f"B·∫°n ƒëang d√πng phi√™n b·∫£n m·ªõi nh·∫•t ({self.VERSION}).",
                    "info"
                )
                return
            
            # T√¨m file EXE trong assets
            exe_asset = None
            for asset in assets:
                if asset['name'].endswith('.exe'):
                    exe_asset = asset
                    break
            
            if not exe_asset:
                self.log("‚úó Kh√¥ng t√¨m th·∫•y file EXE trong b·∫£n ph√°t h√†nh m·ªõi.")
                self.show_message_signal.emit(
                    "C·∫≠p nh·∫≠t",
                    "Kh√¥ng t√¨m th·∫•y file c√†i ƒë·∫∑t.",
                    "warning"
                )
                return
            
            # Y√™u c·∫ßu x√°c nh·∫≠n t·ª´ main thread v√† ƒë·ª£i k·∫øt qu·∫£
            download_url = exe_asset['browser_download_url']
            size_mb = exe_asset['size'] / 1024 / 1024
            
            # L∆∞u th√¥ng tin ƒë·ªÉ dialog handler x·ª≠ l√Ω
            self.pending_update_url = download_url
            self.pending_update_filename = exe_asset['name']
            
            # Hi·ªÉn th·ªã dialog t·ª´ main thread
            self.show_update_dialog_signal.emit(latest_version, str(size_mb), download_url)
            return  # Function s·∫Ω ƒë∆∞·ª£c ti·∫øp t·ª•c t·ª´ _download_and_install_update
            
        except urllib.error.URLError as e:
            self.log(f"‚úó L·ªói k·∫øt n·ªëi: {e}")
            self.show_message_signal.emit(
                "L·ªói",
                "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn GitHub. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.",
                "warning"
            )
            self.update_button.setEnabled(True)
        except Exception as e:
            self.log(f"‚úó L·ªói c·∫≠p nh·∫≠t: {e}")
            import traceback
            self.log(traceback.format_exc())
            self.show_message_signal.emit(
                "L·ªói",
                f"L·ªói c·∫≠p nh·∫≠t: {e}",
                "error"
            )
            self.update_button.setEnabled(True)
        finally:
            self.update_status("S·∫µn s√†ng...")

    @pyqtSlot(str, str, str)
    def _show_message_box(self, title, message, msg_type):
        """Hi·ªÉn th·ªã message box trong main thread"""
        if msg_type == "info":
            QMessageBox.information(self, title, message)
        elif msg_type == "warning":
            QMessageBox.warning(self, title, message)
        elif msg_type == "error":
            QMessageBox.critical(self, title, message)
    
    @pyqtSlot(str, str, float)
    def _show_update_dialog(self, version, size_mb, download_url):
        """Hi·ªÉn th·ªã dialog x√°c nh·∫≠n c·∫≠p nh·∫≠t trong main thread"""
        reply = QMessageBox.question(
            self,
            "C·∫≠p nh·∫≠t m·ªõi",
            f"C√≥ phi√™n b·∫£n m·ªõi: {version}\n\n"
            f"K√≠ch th∆∞·ªõc: {size_mb} MB\n\n"
            f"B·∫°n c√≥ mu·ªën t·∫£i v√† c√†i ƒë·∫∑t kh√¥ng?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # Ch·∫°y download trong thread m·ªõi
            threading.Thread(
                target=self._download_and_install_update,
                args=(download_url, self.pending_update_filename),
                daemon=True
            ).start()
        else:
            self.log("‚ÑπÔ∏è Ng∆∞·ªùi d√πng h·ªßy c·∫≠p nh·∫≠t.")
            self.update_button.setEnabled(True)
    
    def _download_and_install_update(self, download_url, filename):
        """T·∫£i v√† c√†i ƒë·∫∑t b·∫£n c·∫≠p nh·∫≠t"""
        try:
            temp_exe = os.path.join(tempfile.gettempdir(), filename)
            
            self.log(f"üì• ƒêang t·∫£i {filename}...")
            self.update_status(f"ƒêang t·∫£i c·∫≠p nh·∫≠t...")
            
            urllib.request.urlretrieve(download_url, temp_exe)
            
            if not os.path.exists(temp_exe):
                self.log("‚úó T·∫£i file th·∫•t b·∫°i.")
                self.show_message_signal.emit(
                    "L·ªói",
                    "Kh√¥ng th·ªÉ t·∫£i file c·∫≠p nh·∫≠t.",
                    "error"
                )
                return
            
            self.log(f"‚úì T·∫£i th√†nh c√¥ng: {temp_exe}")
            
            # T·∫°o updater script
            current_exe = sys.executable if getattr(sys, 'frozen', False) else __file__
            updater_script = os.path.join(tempfile.gettempdir(), "fastconfig_updater.bat")
            
            with open(updater_script, 'w') as f:
                f.write('@echo off\n')
                f.write('echo ƒêang c·∫≠p nh·∫≠t FastConfigVPS...\n')
                f.write('timeout /t 2 /nobreak >nul\n')
                f.write(f'move /Y "{temp_exe}" "{current_exe}" >nul\n')
                f.write(f'start "" "{current_exe}"\n')
                f.write(f'del "{updater_script}"\n')
                f.write('exit\n')
            
            self.log("üîÑ Kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ c√†i ƒë·∫∑t c·∫≠p nh·∫≠t...")
            
            # Ch·∫°y updater v√† tho√°t
            subprocess.Popen([updater_script], shell=True)
            QApplication.quit()
            
        except Exception as e:
            self.log(f"‚úó L·ªói t·∫£i c·∫≠p nh·∫≠t: {e}")
            self.show_message_signal.emit(
                "L·ªói",
                f"L·ªói t·∫£i c·∫≠p nh·∫≠t: {e}",
                "error"
            )
        finally:
            self.update_button.setEnabled(True)

    def set_registry_value(self, hkey, path, name, value, value_type):
        """Thi·∫øt l·∫≠p gi√° tr·ªã registry"""
        try:
            key = winreg.CreateKeyEx(hkey, path, 0, winreg.KEY_WRITE)
            winreg.SetValueEx(key, name, 0, value_type, value)
            winreg.CloseKey(key)
            return True
        except Exception as e:
            self.log(f"‚úó L·ªói registry: {str(e)}")
            return False
    
    def _set_rdp_text(self, text):
        """C·∫≠p nh·∫≠t n·ªôi dung RDP text theo c√°ch thread-safe t·ª´ worker thread"""
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(0, lambda t=text: self.rdp_text.setPlainText(t))
        except Exception:
            # Fallback n·∫øu v√¨ l√Ω do n√†o ƒë√≥ QTimer kh√¥ng kh·∫£ d·ª•ng
            try:
                self.rdp_text.setPlainText(text)
            except Exception:
                pass
    
    def _log_debug(self, message: str):
        """Ghi log debug an to√†n t·ª´ worker thread (hi·ªÉn th·ªã trong Nh·∫≠t k√Ω ·ª©ng d·ª•ng)."""
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(0, lambda m=message: self.log(f"[DEBUG RDP] {m}"))
        except Exception:
            # N·∫øu kh√¥ng th·ªÉ, b·ªè qua ƒë·ªÉ kh√¥ng l√†m treo app
            pass
    
    def refresh_rdp_history(self):
        """L·∫•y l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p RDP"""
        self.rdp_text.clear()
        self.rdp_text.append("ƒêang l·∫•y l·ªãch s·ª≠ ƒëƒÉng nh·∫≠p RDP...\n")
        
        # Run in thread
        threading.Thread(target=self.get_rdp_history, daemon=True).start()
    
    def get_rdp_history(self):
        """L·∫•y danh s√°ch IP addresses ƒë√£ RDP v√†o VPS - Support Windows 10 & Server"""
        try:
            import ctypes
            
            self.log("=== B·∫ÆT ƒê·∫¶U L·∫§Y L·ªäCH S·ª¨ RDP ===")
            self.log(f"H·ªá ƒëi·ªÅu h√†nh: {self.get_windows_display_name()}")
            
            history_text = "üåç L·ªãch s·ª≠ ƒëƒÉng nh·∫≠p RDP (30 ng√†y qua)\n"
            history_text += "=" * 70 + "\n\n"
            
            # Ki·ªÉm tra quy·ªÅn Administrator
            try:
                is_admin = ctypes.windll.shell32.IsUserAnAdmin()
                self.log(f"Admin rights: {is_admin}")
            except:
                is_admin = False
                self.log("Cannot check admin rights")
            
            # L·∫•y c√°c IP ƒë√£ RDP v√†o t·ª´ nhi·ªÅu ngu·ªìn
            self.log("G·ªçi _get_rdp_events_aggregate()...")
            rdp_ips = self._get_rdp_events_aggregate()
            self.log(f"Nh·∫≠n ƒë∆∞·ª£c {len(rdp_ips) if rdp_ips else 0} IP addresses")
            
            if rdp_ips:
                # L·ªçc b·ªè IP local v√† invalid
                valid_ips = {ip: info for ip, info in rdp_ips.items() 
                           if ip and ip not in ['-', '127.0.0.1', '::1', 'localhost', '0.0.0.0']}
                
                self.log(f"IP h·ª£p l·ªá: {len(valid_ips)}")
                
                if valid_ips:
                    history_text += f"üéØ T√¨m th·∫•y {len(valid_ips)} IP addresses duy nh·∫•t ƒë√£ RDP:\n\n"
                    
                    # S·∫Øp x·∫øp theo s·ªë l·∫ßn k·∫øt n·ªëi
                    sorted_ips = sorted(valid_ips.items(), key=lambda x: x[1]['count'], reverse=True)
                    
                    history_text += f"{'IP Address':<18} {'S·ªë l·∫ßn':<8} {'L·∫ßn cu·ªëi':<20} {'T√†i kho·∫£n'}\n"
                    history_text += "-" * 70 + "\n"
                    
                    for ip, info in sorted_ips:
                        count = info['count']
                        last_time = info['last_time']
                        accounts = ', '.join(list(set(info['accounts']))[:3])  # Unique accounts, max 3
                        if len(set(info['accounts'])) > 3:
                            accounts += '...'
                        
                        history_text += f"{ip:<18} {count:<8} {last_time:<20} {accounts}\n"
                    
                    history_text += "-" * 70 + "\n"
                    
                    # Th·ªëng k√™
                    total_connections = sum(info['count'] for info in valid_ips.values())
                    history_text += f"\nüìä Th·ªëng k√™:\n"
                    history_text += f"‚Ä¢ T·ªïng s·ªë l·∫ßn RDP: {total_connections}\n"
                    history_text += f"‚Ä¢ IP addresses duy nh·∫•t: {len(valid_ips)}\n"
                    
                    # Top IP
                    if sorted_ips:
                        top_ip = sorted_ips[0]
                        history_text += f"‚Ä¢ IP k·∫øt n·ªëi nhi·ªÅu nh·∫•t: {top_ip[0]} ({top_ip[1]['count']} l·∫ßn)\n"
                    
                else:
                    history_text += "‚ùå Kh√¥ng t√¨m th·∫•y IP t·ª´ xa n√†o ƒë√£ RDP v√†o VPS.\n"
            else:
                history_text += "‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán RDP n√†o trong 30 ng√†y qua.\n\n"
                if not is_admin:
                    history_text += "‚ö†Ô∏è C·∫ßn quy·ªÅn Administrator ƒë·ªÉ ƒë·ªçc Event Log.\n"
                else:
                    history_text += "üí° L√Ω do c√≥ th·ªÉ:\n"
                    history_text += "  ‚Ä¢ Ch∆∞a c√≥ RDP connection n√†o trong 30 ng√†y qua\n"
                    history_text += "  ‚Ä¢ Audit Policy ch∆∞a ƒë∆∞·ª£c b·∫≠t\n\n"
                    history_text += "ƒê·ªÉ b·∫≠t Audit Policy (ch·∫°y cmd as Admin):\n"
                    history_text += "  auditpol /set /subcategory:'Logon' /success:enable\n"
            
            self.log("=== K·∫æT TH√öC L·∫§Y L·ªäCH S·ª¨ RDP ===")
            
            # Update UI thread-safe
            QMetaObject.invokeMethod(
                self.rdp_text,
                "setPlainText",
                Qt.QueuedConnection,
                Q_ARG(str, history_text)
            )
        
        except Exception as e:
            import traceback
            self.log(f"‚ùå L·ªñI: {str(e)}")
            self.log(f"Traceback:\n{traceback.format_exc()}")
            
            error_text = f"‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ RDP: {str(e)}\n"
            
            QMetaObject.invokeMethod(
                self.rdp_text,
                "setPlainText",
                Qt.QueuedConnection,
                Q_ARG(str, error_text)
            )
    
    def _get_rdp_events_aggregate(self):
        """L·∫•y RDP events t·ª´ nhi·ªÅu ngu·ªìn - Support Windows 10 & Server"""
        rdp_ips = {}
        all_events = []
        
        try:
            # Thu th·∫≠p t·ª´ nhi·ªÅu ngu·ªìn
            self.log("L·∫•y events t·ª´ Security log (4624, 4648)...")
            events = self._get_security_events_wevtutil()
            if events:
                all_events.extend(events)
                self.log(f"  ‚Üí Security: {len(events)} events")
            
            self.log("L·∫•y events t·ª´ TerminalServices logs...")
            ts_events = self._get_terminalservices_events()
            if ts_events:
                all_events.extend(ts_events)
                self.log(f"  ‚Üí TerminalServices: {len(ts_events)} events")
            
            self.log(f"T·ªïng c·ªông: {len(all_events)} events")
            
            # Aggregate theo IP
            for event in all_events:
                ip = event.get('ip_address', '').strip()
                account = event.get('account', 'N/A').strip()
                time = event.get('time')
                
                if ip and ip != '-' and ip not in ['127.0.0.1', '::1']:
                    if ip not in rdp_ips:
                        rdp_ips[ip] = {
                            'count': 0,
                            'accounts': [],
                            'last_time': None
                        }
                    
                    rdp_ips[ip]['count'] += 1
                    if account and account not in rdp_ips[ip]['accounts']:
                        rdp_ips[ip]['accounts'].append(account)
                    
                    # C·∫≠p nh·∫≠t th·ªùi gian g·∫ßn nh·∫•t
                    if time:
                        time_str = time.strftime('%m/%d/%Y %H:%M')
                        if not rdp_ips[ip]['last_time'] or time_str > rdp_ips[ip]['last_time']:
                            rdp_ips[ip]['last_time'] = time_str
            
        except Exception as e:
            self.log(f"L·ªói trong _get_rdp_events_aggregate: {str(e)}")
            import traceback
            self.log(traceback.format_exc())
            
        return rdp_ips
    
    def _get_security_events_wevtutil(self):
        """L·∫•y Security events (4624, 4648) b·∫±ng wevtutil - Ch·ª©a IP"""
        events = []
        try:
            # L·∫•y Event 4624 v√† 4648 (c·∫£ hai ƒë·ªÅu c√≥ th·ªÉ ch·ª©a IP RDP)
            for event_id in [4624, 4648]:
                cmd = [
                    'wevtutil', 'qe', 'Security',
                    f'/q:*[System[EventID={event_id}]]',
                    '/f:text', '/rd:true', '/c:100'
                ]
                
                result = subprocess.run(
                    cmd,
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    errors='ignore',
                    timeout=15,
                    creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
                )
                
                if result.returncode == 0 and result.stdout:
                    parsed = self._parse_security_events_text(result.stdout, event_id)
                    events.extend(parsed)
        
        except Exception as e:
            self.log(f"  L·ªói _get_security_events: {str(e)}")
        
        return events
    
    def _get_terminalservices_events(self):
        """L·∫•y TerminalServices events (1149, 21, 24) - Ch·ª©a IP"""
        events = []
        
        # TerminalServices-RemoteConnectionManager Event 1149
        try:
            cmd = [
                'wevtutil', 'qe',
                'Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational',
                '/q:*[System[EventID=1149]]',
                '/f:text', '/rd:true', '/c:50'
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='ignore',
                timeout=10,
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
            )
            
            if result.returncode == 0 and result.stdout:
                parsed = self._parse_ts_events_text(result.stdout, 'RCM-1149')
                events.extend(parsed)
        except:
            pass
        
        # TerminalServices-LocalSessionManager Events 21, 24
        try:
            cmd = [
                'wevtutil', 'qe',
                'Microsoft-Windows-TerminalServices-LocalSessionManager/Operational',
                '/q:*[System[(EventID=21 or EventID=24)]]',
                '/f:text', '/rd:true', '/c:50'
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='ignore',
                timeout=10,
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
            )
            
            if result.returncode == 0 and result.stdout:
                parsed = self._parse_ts_events_text(result.stdout, 'LSM')
                events.extend(parsed)
        except:
            pass
        
        return events
    
    def _extract_ip_from_text(self, text):
        """Tr√≠ch xu·∫•t IPv4 t·ª´ text"""
        if not text:
            return None
        
        # IPv4 pattern
        ipv4_pattern = r'((25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d{2}|[1-9]?\d)){3})'
        match = re.search(ipv4_pattern, text)
        if match:
            return match.group(1)
        return None
    
    def _parse_security_events_text(self, output, event_id):
        """Parse Security event text output t·ª´ wevtutil"""
        events = []
        current_event = {}
        
        for line in output.split('\n'):
            line = line.strip()
            
            if line.startswith('Date:'):
                # L∆∞u event tr∆∞·ªõc
                if 'time' in current_event and current_event.get('ip_address'):
                    events.append(current_event.copy())
                
                # Event m·ªõi
                current_event = {'event_id': event_id}
                date_str = line.replace('Date:', '').strip()
                try:
                    current_event['time'] = datetime.strptime(date_str[:19], "%Y-%m-%dT%H:%M:%S")
                except:
                    pass
            
            elif 'Account Name:' in line and 'account' not in current_event:
                parts = line.split(':', 1)
                if len(parts) > 1:
                    account = parts[1].strip()
                    if account and account.upper() not in ['SYSTEM', 'ANONYMOUS LOGON']:
                        current_event['account'] = account
            
            elif 'Network Address:' in line or 'Source Network Address:' in line:
                # Tr√≠ch xu·∫•t IP
                ip = self._extract_ip_from_text(line)
                if ip:
                    current_event['ip_address'] = ip
        
        # L∆∞u event cu·ªëi
        if 'time' in current_event and current_event.get('ip_address'):
            events.append(current_event.copy())
        
        return events
    
    def _parse_ts_events_text(self, output, source):
        """Parse TerminalServices event text output"""
        events = []
        current_event = {}
        
        for line in output.split('\n'):
            line = line.strip()
            
            if line.startswith('Date:'):
                # L∆∞u event tr∆∞·ªõc
                if 'time' in current_event and current_event.get('ip_address'):
                    events.append(current_event.copy())
                
                # Event m·ªõi
                current_event = {'source': source}
                date_str = line.replace('Date:', '').strip()
                try:
                    current_event['time'] = datetime.strptime(date_str[:19], "%Y-%m-%dT%H:%M:%S")
                except:
                    pass
            
            elif 'User:' in line:
                # Tr√≠ch xu·∫•t username
                parts = line.split('User:', 1)
                if len(parts) > 1:
                    user_part = parts[1].strip()
                    # Format: DOMAIN\Username
                    if '\\' in user_part:
                        current_event['account'] = user_part.split('\\')[-1]
                    else:
                        current_event['account'] = user_part
            
            # Tr√≠ch xu·∫•t IP t·ª´ b·∫•t k·ª≥ d√≤ng n√†o
            ip = self._extract_ip_from_text(line)
            if ip and 'ip_address' not in current_event:
                current_event['ip_address'] = ip
        
        # L∆∞u event cu·ªëi
        if 'time' in current_event and current_event.get('ip_address'):
            events.append(current_event.copy())
        
        return events
    
    # Gi·ªØ c√°c ph∆∞∆°ng th·ª©c c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch (n·∫øu c·∫ßn)
    def _get_rdp_ip_addresses(self):
        """Legacy method - gi·ªØ ƒë·ªÉ t∆∞∆°ng th√≠ch"""
        return self._get_rdp_events_aggregate()
    
    def _get_rdp_events_win32(self):
        """L·∫•y RDP events b·∫±ng Win32 Event Log (ch·ªâ Logon Type 10)"""
        try:
            import win32evtlog
            import win32evtlogutil
            import win32con
        except ImportError:
            self.log("pywin32 kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            return []
        
        events = []
        
        try:
            # M·ªü Security event log
            log_handle = win32evtlog.OpenEventLog(None, "Security")
            self.log("  ‚Üí ƒê√£ m·ªü Security Event Log")
            
            # T√≠nh th·ªùi gian 30 ng√†y tr∆∞·ªõc
            start_time = datetime.now() - timedelta(days=30)
            
            # ƒê·ªçc events t·ª´ m·ªõi nh·∫•t
            flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ
            
            event_records = win32evtlog.ReadEventLog(log_handle, flags, 0)
            
            for event in event_records:
                # Ch·ªâ xem x√©t Event ID 4624 (Logon)
                if event.EventID != 4624:
                    continue
                    
                # Ki·ªÉm tra th·ªùi gian
                try:
                    event_time = datetime.fromtimestamp(event.TimeGenerated.timestamp())
                except:
                    continue
                    
                if event_time < start_time:
                    break  # ƒê√£ ƒë·ªçc h·∫øt events trong 30 ng√†y
                
                # Parse event data
                try:
                    event_data = event.StringInserts
                    if not event_data or len(event_data) < 20:
                        continue
                        
                    logon_type = event_data[8] if len(event_data) > 8 else None
                    
                    # Ch·ªâ l·∫•y RDP login (Logon Type = 10)
                    if logon_type != '10':
                        continue
                    
                    account = event_data[5] if len(event_data) > 5 else "Unknown"
                    domain = event_data[6] if len(event_data) > 6 else ""
                    ip_address = event_data[18] if len(event_data) > 18 else "-"
                    
                    # B·ªè qua t√†i kho·∫£n h·ªá th·ªëng
                    if account.upper() in ['SYSTEM', 'ANONYMOUS LOGON', 'DWM-1', 'DWM-2']:
                        continue
                    
                    events.append({
                        'time': event_time,
                        'account': account,
                        'domain': domain,
                        'ip_address': ip_address,
                        'login_type': '10',
                        'login_type_name': 'RDP'
                    })
                    
                except (IndexError, ValueError, AttributeError):
                    continue
                    
            win32evtlog.CloseEventLog(log_handle)
            self.log(f"  ‚Üí Win32: T√¨m th·∫•y {len(events)} RDP events")
            
        except Exception as e:
            self.log(f"  ‚Üí Win32 Error: {str(e)}")
            
        return events
    
    def _get_rdp_events_wevtutil(self):
        """L·∫•y RDP events b·∫±ng wevtutil command"""
        try:
            # Ch·ªâ l·∫•y RDP events (Logon Type 10) trong 30 ng√†y
            cmd = [
                "wevtutil", "qe", "Security", 
                "/q:*[System[EventID=4624] and EventData[Data[@Name='LogonType']='10']]",
                "/f:text", "/rd:true", "/c:100"
            ]
            
            self.log(f"  ‚Üí Ch·∫°y: {' '.join(cmd[:4])}...")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='ignore',
                timeout=30
            )
            
            if result.returncode == 0 and result.stdout:
                events = self._parse_rdp_wevtutil_output(result.stdout)
                self.log(f"  ‚Üí wevtutil: T√¨m th·∫•y {len(events)} RDP events")
                return events
            else:
                self.log(f"  ‚Üí wevtutil failed: code {result.returncode}")
            
        except Exception as e:
            self.log(f"  ‚Üí wevtutil Error: {str(e)}")
            
        return []
    
    def _get_rdp_events_powershell(self):
        """L·∫•y RDP events b·∫±ng PowerShell"""
        try:
            # Ch·ªâ l·∫•y RDP events (Logon Type 10)
            ps_script = r'''
            $startTime = (Get-Date).AddDays(-30)
            Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4624; StartTime=$startTime} -MaxEvents 100 | 
            Where-Object { 
                $_.Message -match 'Logon Type:\s+10' -and 
                $_.Message -notmatch 'Account Name:\s+(SYSTEM|ANONYMOUS LOGON|DWM-)' 
            } |
            ForEach-Object {
                $message = $_.Message
                $account = if ($message -match 'Account Name:\s+([^\r\n]+)') { $matches[1].Trim() } else { 'Unknown' }
                $ip = if ($message -match 'Source Network Address:\s+([^\r\n]+)') { $matches[1].Trim() } else { '-' }
                
                "$($_.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss'))|$account|$ip|RDP"
            }
            '''
            
            self.log("  ‚Üí Ch·∫°y PowerShell script...")
            
            result = subprocess.run(
                ["powershell", "-Command", ps_script],
                capture_output=True,
                text=True,
                encoding='utf-8',
                errors='ignore',
                timeout=30
            )
            
            if result.returncode == 0 and result.stdout.strip():
                events = []
                for line in result.stdout.strip().split('\n'):
                    parts = line.strip().split('|')
                    if len(parts) >= 4:
                        try:
                            time_str = parts[0]
                            account = parts[1]
                            ip = parts[2]
                            
                            event_time = datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S')
                            
                            events.append({
                                'time': event_time,
                                'account': account,
                                'ip_address': ip,
                                'login_type': '10',
                                'login_type_name': 'RDP'
                            })
                        except:
                            continue
                
                self.log(f"  ‚Üí PowerShell: T√¨m th·∫•y {len(events)} RDP events")
                return events
            else:
                self.log(f"  ‚Üí PowerShell failed: code {result.returncode}")
        
        except Exception as e:
            self.log(f"  ‚Üí PowerShell Error: {str(e)}")
            
        return []
    
    def _parse_rdp_wevtutil_output(self, output):
        """Parse wevtutil output cho RDP events"""
        events = []
        current_event = {}
        
        lines = output.split('\n')
        for line in lines:
            line = line.strip()
            
            if line.startswith('Date:'):
                # L∆∞u event tr∆∞·ªõc ƒë√≥ n·∫øu h·ª£p l·ªá
                if 'time' in current_event and current_event.get('is_rdp'):
                    events.append(current_event.copy())
                
                # B·∫Øt ƒë·∫ßu event m·ªõi
                current_event = {}
                date_str = line.replace('Date:', '').strip()
                try:
                    current_event['time'] = datetime.strptime(date_str, "%Y-%m-%dT%H:%M:%S.%fZ")
                except:
                    try:
                        current_event['time'] = datetime.strptime(date_str[:19], "%Y-%m-%dT%H:%M:%S")
                    except:
                        continue
            
            elif 'Logon Type:' in line and '10' in line:
                # ƒê√¢y l√† RDP event
                current_event['is_rdp'] = True
                current_event['login_type'] = '10'
                current_event['login_type_name'] = 'RDP'
                
            elif 'Account Name:' in line and current_event.get('is_rdp'):
                account = line.split(':', 1)[1].strip()
                if account and account.upper() not in ['SYSTEM', 'ANONYMOUS LOGON', 'DWM-1', 'DWM-2']:
                    current_event['account'] = account
                
            elif 'Source Network Address:' in line and current_event.get('is_rdp'):
                ip = line.split(':', 1)[1].strip()
                current_event['ip_address'] = ip if ip != '-' else '-'
        
        # Th√™m event cu·ªëi n·∫øu h·ª£p l·ªá
        if 'time' in current_event and current_event.get('is_rdp'):
            events.append(current_event.copy())
        
        # S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
        events.sort(key=lambda x: x.get('time', datetime.min), reverse=True)
        
        return events
    
    # C√°c ph∆∞∆°ng th·ª©c c≈© - gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch
    def _get_rdp_via_powershell(self):
        """Ph∆∞∆°ng ph√°p 1: L·∫•y RDP history b·∫±ng PowerShell inline (nhanh, kh√¥ng t·∫°o file t·∫°m)."""
        try:
            self.log("  ‚Üí Chu·∫©n b·ªã PowerShell command...")
            
            # PowerShell script t·ªëi ∆∞u - inline, kh√¥ng c·∫ßn file t·∫°m
            ps_command = r"""
$ErrorActionPreference='SilentlyContinue';
$d=(Get-Date).AddDays(-30);
$e=Get-WinEvent -FilterHashtable @{LogName='Security';Id=4624;StartTime=$d} -MaxEvents 500 | Where-Object {
    $x=[xml]$_.ToXml();
    $lt=$x.Event.EventData.Data | Where-Object {$_.Name -eq 'LogonType'} | Select-Object -ExpandProperty '#text';
    $ip=$x.Event.EventData.Data | Where-Object {$_.Name -eq 'IpAddress'} | Select-Object -ExpandProperty '#text';
    ($lt -eq '10') -and ($ip -match '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$')
} | Select-Object -First 30 | ForEach-Object {
    $x=[xml]$_.ToXml();
    $d=@{};
    $x.Event.EventData.Data | ForEach-Object {$d[$_.Name]=$_.'#text'};
    [PSCustomObject]@{
        Time=$_.TimeCreated.ToString('yyyy-MM-dd HH:mm:ss');
        User=$d.TargetUserName;
        IP=$d.IpAddress;
        Host=$d.WorkstationName
    }
};
if($e){$e|ConvertTo-Json -Compress}else{'NO_EVENTS'}
"""
            
            self.log(f"  ‚Üí PowerShell script length: {len(ps_command)} chars")
            self._log_debug("Ch·∫°y PowerShell inline query...")
            
            # Ch·∫°y PowerShell v·ªõi command inline (kh√¥ng file t·∫°m)
            cmd = ['powershell.exe', '-NoProfile', '-ExecutionPolicy', 'Bypass', '-Command', ps_command]
            self.log(f"  ‚Üí Executing: powershell.exe -NoProfile -ExecutionPolicy Bypass -Command [script]")
            
            self.log("  ‚Üí Ch·ªù PowerShell th·ª±c thi (timeout: 45s)...")
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=45,  # TƒÉng timeout l√™n 45s cho an to√†n
                encoding='utf-8',
                errors='ignore',
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
            )
            
            output = result.stdout.strip()
            stderr = result.stderr.strip()
            
            self.log(f"  ‚Üí PowerShell exit code: {result.returncode}")
            self.log(f"  ‚Üí stdout length: {len(output)} chars")
            self.log(f"  ‚Üí stderr length: {len(stderr)} chars")
            
            if stderr:
                self.log(f"  ‚Üí stderr content: {stderr[:500]}")
            
            if output:
                self.log(f"  ‚Üí stdout preview: {output[:200]}...")
            else:
                self.log("  ‚Üí stdout is EMPTY")
            
            self._log_debug(f"PowerShell exit: {result.returncode}, stdout: {len(output)} chars")
            
            # X·ª≠ l√Ω k·∫øt qu·∫£
            if result.returncode != 0:
                self.log(f"  ‚úó PowerShell returned non-zero exit code: {result.returncode}")
                if 'UnauthorizedAccessException' in stderr or 'Access is denied' in stderr:
                    self.log("  ‚Üí Detected ACCESS_DENIED")
                    return {'success': False, 'error': 'ACCESS_DENIED'}
            
            if output == 'NO_EVENTS':
                self.log("  ‚Üí PowerShell returned 'NO_EVENTS' (no RDP events found)")
                return {'success': True, 'data': [], 'method': 'PowerShell'}
            
            if not output:
                self.log("  ‚Üí PowerShell returned empty output")
                return {'success': True, 'data': [], 'method': 'PowerShell'}
            
            # Parse JSON
            self.log("  ‚Üí Parsing JSON output...")
            try:
                import json
                data = json.loads(output)
                
                # N·∫øu l√† single object, chuy·ªÉn th√†nh list
                if isinstance(data, dict):
                    self.log("  ‚Üí JSON is single object, converting to list")
                    data = [data]
                elif isinstance(data, list):
                    self.log(f"  ‚Üí JSON is array with {len(data)} items")
                else:
                    self.log(f"  ‚Üí JSON type: {type(data)}")
                
                self.log(f"  ‚úì Successfully parsed {len(data)} RDP records")
                self._log_debug(f"T√¨m th·∫•y {len(data)} RDP sessions")
                return {'success': True, 'data': data, 'method': 'PowerShell Get-WinEvent'}
            
            except json.JSONDecodeError as e:
                self.log(f"  ‚úó JSON parse error: {str(e)}")
                self.log(f"  ‚Üí Failed at position: {e.pos if hasattr(e, 'pos') else 'unknown'}")
                self._log_debug(f"JSON parse error: {e}")
                return {'success': False, 'error': f'JSON_PARSE_ERROR: {str(e)}'}
        
        except subprocess.TimeoutExpired:
            self.log("  ‚úó PowerShell TIMEOUT sau 45s")
            self._log_debug("PowerShell timeout sau 45s")
            return {'success': False, 'error': 'TIMEOUT'}
        
        except Exception as e:
            import traceback
            self.log(f"  ‚úó PowerShell exception: {str(e)}")
            self.log(f"  ‚Üí Traceback:\n{traceback.format_exc()}")
            self._log_debug(f"PowerShell exception: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def _get_rdp_via_wevtutil(self):
        """Ph∆∞∆°ng ph√°p 2 (Fallback): D√πng wevtutil.exe - tool native Windows, ho·∫°t ƒë·ªông tr√™n t·∫•t c·∫£ versions."""
        try:
            from datetime import datetime, timedelta
            import xml.etree.ElementTree as ET
            
            self.log("  ‚Üí Chu·∫©n b·ªã wevtutil query...")
            self._log_debug("Ch·∫°y wevtutil query...")
            
            # T√≠nh start time (30 ng√†y tr∆∞·ªõc)
            start_time = datetime.now() - timedelta(days=30)
            start_str = start_time.strftime('%Y-%m-%dT%H:%M:%S')
            self.log(f"  ‚Üí Start time filter: {start_str}")
            
            # Query wevtutil v·ªõi XPath filter
            # Event ID 4624 (Logon), LogonType=10 (RemoteInteractive/RDP)
            query = (
                f"*[System[(EventID=4624) and TimeCreated[@SystemTime>='{start_str}']]] and "
                f"*[EventData[Data[@Name='LogonType']='10']]"
            )
            
            self.log(f"  ‚Üí XPath query: {query[:100]}...")
            
            cmd = [
                'wevtutil.exe', 'qe', 'Security',
                '/q:' + query,
                '/f:xml',
                '/c:30',  # L·∫•y t·ªëi ƒëa 30 events
                '/rd:true'  # Reverse direction (m·ªõi nh·∫•t tr∆∞·ªõc)
            ]
            
            self.log(f"  ‚Üí Executing: {' '.join(cmd[:3])} [query] [options]")
            self.log("  ‚Üí Ch·ªù wevtutil th·ª±c thi (timeout: 30s)...")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=30,
                encoding='utf-8',
                creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == 'win32' else 0
            )
            
            output = result.stdout.strip()
            stderr = result.stderr.strip()
            
            self.log(f"  ‚Üí wevtutil exit code: {result.returncode}")
            self.log(f"  ‚Üí stdout length: {len(output)} chars")
            self.log(f"  ‚Üí stderr length: {len(stderr)} chars")
            
            if stderr:
                self.log(f"  ‚Üí stderr content: {stderr[:500]}")
            
            self._log_debug(f"wevtutil exit: {result.returncode}, output: {len(output)} chars")
            
            if result.returncode != 0:
                self.log(f"  ‚úó wevtutil returned non-zero exit code: {result.returncode}")
                if 'Access is denied' in stderr or 'access denied' in stderr.lower():
                    self.log("  ‚Üí Detected ACCESS_DENIED")
                    return {'success': False, 'error': 'ACCESS_DENIED'}
                return {'success': False, 'error': stderr or 'wevtutil failed'}
            
            if not output or len(output) < 100:
                self.log("  ‚Üí wevtutil returned empty or too short output")
                return {'success': True, 'data': [], 'method': 'wevtutil'}
            
            # Parse XML output
            self.log("  ‚Üí Parsing XML output...")
            if output:
                self.log(f"  ‚Üí XML preview: {output[:200]}...")
            
            data = self._parse_wevtutil_xml(output)
            
            if data:
                self.log(f"  ‚úì Successfully parsed {len(data)} RDP records from wevtutil")
                self._log_debug(f"wevtutil t√¨m th·∫•y {len(data)} RDP sessions")
                return {'success': True, 'data': data, 'method': 'wevtutil (Native Windows Tool)'}
            else:
                self.log("  ‚Üí XML parsing returned no data")
                return {'success': True, 'data': [], 'method': 'wevtutil'}
        
        except subprocess.TimeoutExpired:
            self.log("  ‚úó wevtutil TIMEOUT sau 30s")
            self._log_debug("wevtutil timeout sau 30s")
            return {'success': False, 'error': 'TIMEOUT'}
        
        except Exception as e:
            import traceback
            self.log(f"  ‚úó wevtutil exception: {str(e)}")
            self.log(f"  ‚Üí Traceback:\n{traceback.format_exc()}")
            self._log_debug(f"wevtutil exception: {str(e)}")
            return {'success': False, 'error': str(e)}
    
    def _parse_wevtutil_xml(self, xml_output):
        """Parse XML output t·ª´ wevtutil."""
        try:
            import xml.etree.ElementTree as ET
            from datetime import datetime
            import re
            
            self.log("    ‚Üí Starting XML parsing...")
            results = []
            
            # Wrap in root element n·∫øu c√≥ nhi·ªÅu events
            if not xml_output.startswith('<?xml'):
                self.log("    ‚Üí Wrapping XML in root element")
                xml_output = '<?xml version="1.0"?><Events>' + xml_output + '</Events>'
            
            self.log("    ‚Üí Parsing XML string...")
            root = ET.fromstring(xml_output)
            self.log(f"    ‚Üí Root tag: {root.tag}")
            
            # Namespace cho Windows Event Log XML
            ns = {'ns': 'http://schemas.microsoft.com/win/2004/08/events/event'}
            
            events = root.findall('.//ns:Event', ns) if root.tag.endswith('Events') else [root]
            self.log(f"    ‚Üí Found {len(events)} Event elements")
            
            for idx, event in enumerate(events):
                self.log(f"    ‚Üí Processing event {idx+1}/{len(events)}...")
                try:
                    # L·∫•y TimeCreated
                    time_elem = event.find('.//ns:TimeCreated', ns)
                    time_str = ''
                    if time_elem is not None:
                        system_time = time_elem.get('SystemTime', '')
                        if system_time:
                            dt = datetime.fromisoformat(system_time.replace('Z', '+00:00'))
                            time_str = dt.strftime('%Y-%m-%d %H:%M:%S')
                    
                    # Parse EventData
                    event_data = {}
                    for data_elem in event.findall('.//ns:Data', ns):
                        name = data_elem.get('Name', '')
                        value = data_elem.text or ''
                        event_data[name] = value
                    
                    # L·ªçc LogonType=10 v√† IPv4
                    logon_type = event_data.get('LogonType', '')
                    ip_address = event_data.get('IpAddress', '')
                    
                    if logon_type == '10' and re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', ip_address):
                        results.append({
                            'Time': time_str,
                            'User': event_data.get('TargetUserName', ''),
                            'IP': ip_address,
                            'Host': event_data.get('WorkstationName', '')
                        })
                
                except Exception as e:
                    self._log_debug(f"Error parsing event: {str(e)}")
                    continue
            
            return results
        
        except Exception as e:
            self._log_debug(f"XML parse error: {str(e)}")
            return []
    
    def _display_rdp_results(self, data, method):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ RDP history."""
        history_text = "L·ªãch s·ª≠ ƒëƒÉng nh·∫≠p RDP (30 ng√†y g·∫ßn nh·∫•t)\n" + "=" * 80 + "\n\n"
        
        if not data:
            history_text += "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒëƒÉng nh·∫≠p RDP n√†o.\n\n"
            history_text += "L√Ω do c√≥ th·ªÉ:\n"
            history_text += "‚Ä¢ Kh√¥ng c√≥ k·∫øt n·ªëi RDP n√†o trong 30 ng√†y qua\n"
            history_text += "‚Ä¢ Security Audit ch∆∞a ƒë∆∞·ª£c b·∫≠t\n"
            history_text += "‚Ä¢ Event log ƒë√£ b·ªã x√≥a ho·∫∑c rotate\n\n"
            history_text += "ƒê·ªÉ b·∫≠t audit:\n"
            history_text += "  auditpol /set /subcategory:'Logon' /success:enable\n"
        else:
            history_text += f"T√¨m th·∫•y {len(data)} phi√™n ƒëƒÉng nh·∫≠p\n\n"
            history_text += f"{'Th·ªùi gian':<20} {'T√†i kho·∫£n':<20} {'ƒê·ªãa ch·ªâ IP':<16} {'Workstation':<20}\n"
            history_text += "-" * 80 + "\n"
            
            for item in data:
                time_str = item.get('Time', '')[:19].ljust(20)
                user = item.get('User', '')[:20].ljust(20)
                ip = item.get('IP', '')[:16].ljust(16)
                host = item.get('Host', '')[:20]
                history_text += f"{time_str}{user}{ip}{host}\n"
            
            history_text += f"\n‚úì Hi·ªÉn th·ªã th√†nh c√¥ng {len(data)} phi√™n ƒëƒÉng nh·∫≠p RDP m·ªõi nh·∫•t\n"
        
        history_text += "\n" + "-" * 80 + "\n"
        history_text += f"Ph∆∞∆°ng th·ª©c: {method}\n"
        history_text += f"Ngu·ªìn: Security Event Log (Event ID 4624, LogonType=10)\n"
        history_text += f"H·ªá ƒëi·ªÅu h√†nh: {self.get_windows_display_name()}\n"
        
        self._set_rdp_text(history_text)
    
    def _display_error_message(self, error):
        """Hi·ªÉn th·ªã th√¥ng b√°o l·ªói."""
        history_text = "L·ªãch s·ª≠ ƒëƒÉng nh·∫≠p RDP\n" + "=" * 80 + "\n\n"
        
        if error == 'ACCESS_DENIED':
            history_text += "‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p Security Event Log\n\n"
            history_text += "Gi·∫£i ph√°p:\n"
            history_text += "1. Ch·∫°y ·ª©ng d·ª•ng v·ªõi quy·ªÅn Administrator (Run as Administrator)\n"
            history_text += "2. Ho·∫∑c b·∫•m chu·ªôt ph·∫£i v√†o file .exe ‚Üí Properties ‚Üí Compatibility\n"
            history_text += "   ‚Üí ‚úì Run this program as an administrator\n"
        elif error == 'TIMEOUT':
            history_text += "‚è±Ô∏è Timeout: Truy v·∫•n Event Log qu√° l√¢u\n\n"
            history_text += "L√Ω do c√≥ th·ªÉ:\n"
            history_text += "‚Ä¢ Event Log qu√° l·ªõn (h√†ng tri·ªáu events)\n"
            history_text += "‚Ä¢ H·ªá th·ªëng ƒëang b·∫≠n\n\n"
            history_text += "Gi·∫£i ph√°p:\n"
            history_text += "‚Ä¢ Th·ª≠ l·∫°i sau v√†i ph√∫t\n"
            history_text += "‚Ä¢ Ho·∫∑c x√≥a b·ªõt Event Log c≈©\n"
        else:
            history_text += f"‚ùå L·ªói: {error}\n\n"
            history_text += "Vui l√≤ng ki·ªÉm tra:\n"
            history_text += "‚Ä¢ Quy·ªÅn Administrator\n"
            history_text += "‚Ä¢ Security Event Log service ƒëang ch·∫°y\n"
        
        self._set_rdp_text(history_text)
    
    def export_rdp_history(self):
        """Xu·∫•t l·ªãch s·ª≠ RDP ra file"""
        filename, _ = QFileDialog.getSaveFileName(
            self,
            "Xu·∫•t l·ªãch s·ª≠ RDP",
            f"rdp_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
            "Text Files (*.txt)"
        )
        
        if filename:
            try:
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(self.rdp_text.toPlainText())
                QMessageBox.information(self, "Th√†nh c√¥ng", f"ƒê√£ xu·∫•t l·ªãch s·ª≠ RDP ra:\n{filename}")
            except Exception as e:
                QMessageBox.critical(self, "L·ªói", f"Kh√¥ng th·ªÉ xu·∫•t file:\n{str(e)}")
    
    def toggle_theme(self):
        """Chuy·ªÉn ƒë·ªïi ch·∫ø ƒë·ªô s√°ng/t·ªëi"""
        if self.current_theme == "light":
            self.current_theme = "dark"
            self.theme_button.setText("üåô")
            self.theme_button.setToolTip("Chuy·ªÉn sang ch·∫ø ƒë·ªô s√°ng")
        else:
            self.current_theme = "light"
            self.theme_button.setText("‚òÄ")
            self.theme_button.setToolTip("Chuy·ªÉn sang ch·∫ø ƒë·ªô t·ªëi")
        
        self.apply_theme()
    
    def apply_theme(self):
        """√Åp d·ª•ng theme"""
        # Set default font cho to√†n b·ªô app
        app_font = QFont("Segoe UI", 9)
        app_font.setWeight(QFont.Normal)
        QApplication.instance().setFont(app_font)
        
        if self.current_theme == "dark":
            # Update theme button style for dark mode
            if hasattr(self, 'theme_button'):
                self.theme_button.setStyleSheet("""
                    QPushButton {
                        background-color: #1e293b;
                        border: 2px solid #475569;
                        border-radius: 18px;
                        font-size: 20px;
                        padding: 0px;
                        color: #fbbf24;
                    }
                    QPushButton:hover {
                        background-color: #334155;
                        border-color: #64748b;
                    }
                """)
            self.setStyleSheet("""
                QMainWindow, QWidget, QGroupBox {
                    background-color: #1e293b;
                    color: #f8fafc;
                    font-family: 'Segoe UI', 'Roboto', sans-serif;
                }
                QLineEdit, QTextEdit, QComboBox {
                    background-color: #334155;
                    color: #f8fafc;
                    border: 1px solid #475569;
                    border-radius: 4px;
                    padding: 5px;
                    font-family: 'Segoe UI', 'Roboto', sans-serif;
                }
                QGroupBox {
                    border: 1px solid #475569;
                    border-radius: 5px;
                    margin-top: 8px;
                    padding: 8px;
                    font-weight: 600;
                }
                QGroupBox::title {
                    color: #94a3b8;
                    font-weight: 600;
                    font-size: 10pt;
                }
                QCheckBox {
                    color: #f8fafc;
                    font-weight: 500;
                }
                QPushButton {
                    background-color: #4f46e5;
                    color: white;
                    border: none;
                    padding: 6px 12px;
                    border-radius: 4px;
                    font-weight: 500;
                }
                QPushButton:hover {
                    background-color: #4338ca;
                }
                QTabWidget::pane {
                    border: 1px solid #475569;
                    background-color: #334155;
                }
                QTabBar::tab {
                    background-color: #1e293b;
                    color: #94a3b8;
                    padding: 8px 16px;
                    border: 1px solid #475569;
                    font-weight: 500;
                }
                QTabBar::tab:selected {
                    background-color: #334155;
                    color: #f8fafc;
                    font-weight: 600;
                }
                QProgressBar {
                    border: 1px solid #475569;
                    border-radius: 4px;
                    text-align: center;
                    background-color: #334155;
                    font-weight: 500;
                }
                QProgressBar::chunk {
                    background-color: #4f46e5;
                }
                QLabel {
                    font-weight: 500;
                }
            """)
        else:
            # Update theme button style for light mode
            if hasattr(self, 'theme_button'):
                self.theme_button.setStyleSheet("""
                    QPushButton {
                        background-color: #ffffff;
                        border: 2px solid #d1d5db;
                        border-radius: 18px;
                        font-size: 20px;
                        padding: 0px;
                        color: #f59e0b;
                    }
                    QPushButton:hover {
                        background-color: #f9fafb;
                        border-color: #9ca3af;
                    }
                """)
            
            self.setStyleSheet("""
                QMainWindow, QWidget, QGroupBox {
                    background-color: #f8fafc;
                    color: #1e293b;
                    font-family: 'Segoe UI', 'Roboto', sans-serif;
                }
                QLineEdit, QTextEdit, QComboBox {
                    background-color: #ffffff;
                    color: #1e293b;
                    border: 1px solid #d1d5db;
                    border-radius: 4px;
                    padding: 5px;
                    font-family: 'Segoe UI', 'Roboto', sans-serif;
                }
                QGroupBox {
                    border: 1px solid #e5e7eb;
                    border-radius: 5px;
                    margin-top: 8px;
                    padding: 8px;
                    font-weight: 600;
                }
                QGroupBox::title {
                    color: #4b5563;
                    font-weight: 600;
                    font-size: 10pt;
                }
                QCheckBox {
                    color: #1e293b;
                    font-weight: 500;
                }
                QPushButton {
                    background-color: #4f46e5;
                    color: white;
                    border: none;
                    padding: 6px 12px;
                    border-radius: 4px;
                    font-weight: 500;
                }
                QPushButton:hover {
                    background-color: #4338ca;
                }
                QTabWidget::pane {
                    border: 1px solid #e5e7eb;
                    background-color: #ffffff;
                }
                QTabBar::tab {
                    background-color: #f1f5f9;
                    color: #64748b;
                    padding: 8px 16px;
                    border: 1px solid #e5e7eb;
                    font-weight: 500;
                }
                QTabBar::tab:selected {
                    background-color: #ffffff;
                    color: #1e293b;
                    font-weight: 600;
                }
                QProgressBar {
                    border: 1px solid #e5e7eb;
                    border-radius: 4px;
                    text-align: center;
                    background-color: #f1f5f9;
                    font-weight: 500;
                }
                QProgressBar::chunk {
                    background-color: #4f46e5;
                }
                QLabel {
                    font-weight: 500;
                }
            """)


def main():
    """H√†m main"""
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    
    window = FastConfigVPS()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()